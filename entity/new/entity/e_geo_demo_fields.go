// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/geo_demo"

	"github.com/zodileap/taurus_go/datautil/geo"
	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/field"
)

// geoDemo_ID is Id field
type geoDemo_ID struct {
	field.IntStorage[int64]
	config *geoentityConfig
}

// newgeoDemo_ID creates a new geoDemo_ID
func newGeoDemo_ID(c *geoentityConfig) *geoDemo_ID {
	t := &geoDemo_ID{}
	t.config = c
	return t
}

// Set sets the value of Id field
func (t *geoDemo_ID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldID.Name.String())
	}
}

// Get gets the value of Id field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *geoDemo_ID) Get() int64 {
	return *t.IntStorage.Get()
}

// geoDemo_Point is Point field
type geoDemo_Point struct {
	geo.GeometryStorage[*geo.Point, geo.S4326, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_Point creates a new geoDemo_Point
func newGeoDemo_Point(c *geoentityConfig) *geoDemo_Point {
	t := &geoDemo_Point{}
	t.config = c
	return t
}

// Set sets the value of Point field
func (t *geoDemo_Point) Set(v *geo.Point) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPoint.Name.String())
	}
}

// Get gets the value of Point field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_Point) Get() **geo.Point {
	return t.GeometryStorage.Get()
}

// geoDemo_LineString is LineString field
type geoDemo_LineString struct {
	geo.GeometryStorage[*geo.LineString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_LineString creates a new geoDemo_LineString
func newGeoDemo_LineString(c *geoentityConfig) *geoDemo_LineString {
	t := &geoDemo_LineString{}
	t.config = c
	return t
}

// Set sets the value of LineString field
func (t *geoDemo_LineString) Set(v *geo.LineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldLineString.Name.String())
	}
}

// Get gets the value of LineString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_LineString) Get() **geo.LineString {
	return t.GeometryStorage.Get()
}

// geoDemo_Polygon is Polygon field
type geoDemo_Polygon struct {
	geo.GeometryStorage[*geo.Polygon, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_Polygon creates a new geoDemo_Polygon
func newGeoDemo_Polygon(c *geoentityConfig) *geoDemo_Polygon {
	t := &geoDemo_Polygon{}
	t.config = c
	return t
}

// Set sets the value of Polygon field
func (t *geoDemo_Polygon) Set(v *geo.Polygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPolygon.Name.String())
	}
}

// Get gets the value of Polygon field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_Polygon) Get() **geo.Polygon {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiPoint is MultiPoint field
type geoDemo_MultiPoint struct {
	geo.GeometryStorage[*geo.MultiPoint, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_MultiPoint creates a new geoDemo_MultiPoint
func newGeoDemo_MultiPoint(c *geoentityConfig) *geoDemo_MultiPoint {
	t := &geoDemo_MultiPoint{}
	t.config = c
	return t
}

// Set sets the value of MultiPoint field
func (t *geoDemo_MultiPoint) Set(v *geo.MultiPoint) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPoint.Name.String())
	}
}

// Get gets the value of MultiPoint field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiPoint) Get() **geo.MultiPoint {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiLineString is MultiLineString field
type geoDemo_MultiLineString struct {
	geo.GeometryStorage[*geo.MultiLineString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_MultiLineString creates a new geoDemo_MultiLineString
func newGeoDemo_MultiLineString(c *geoentityConfig) *geoDemo_MultiLineString {
	t := &geoDemo_MultiLineString{}
	t.config = c
	return t
}

// Set sets the value of MultiLineString field
func (t *geoDemo_MultiLineString) Set(v *geo.MultiLineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiLineString.Name.String())
	}
}

// Get gets the value of MultiLineString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiLineString) Get() **geo.MultiLineString {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiPolygon is MultiPolygon field
type geoDemo_MultiPolygon struct {
	geo.GeometryStorage[*geo.MultiPolygon, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_MultiPolygon creates a new geoDemo_MultiPolygon
func newGeoDemo_MultiPolygon(c *geoentityConfig) *geoDemo_MultiPolygon {
	t := &geoDemo_MultiPolygon{}
	t.config = c
	return t
}

// Set sets the value of MultiPolygon field
func (t *geoDemo_MultiPolygon) Set(v *geo.MultiPolygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPolygon.Name.String())
	}
}

// Get gets the value of MultiPolygon field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiPolygon) Get() **geo.MultiPolygon {
	return t.GeometryStorage.Get()
}

// geoDemo_CircularString is CircularString field
type geoDemo_CircularString struct {
	geo.GeometryStorage[*geo.CircularString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemo_CircularString creates a new geoDemo_CircularString
func newGeoDemo_CircularString(c *geoentityConfig) *geoDemo_CircularString {
	t := &geoDemo_CircularString{}
	t.config = c
	return t
}

// Set sets the value of CircularString field
func (t *geoDemo_CircularString) Set(v *geo.CircularString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldCircularString.Name.String())
	}
}

// Get gets the value of CircularString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_CircularString) Get() **geo.CircularString {
	return t.GeometryStorage.Get()
}

// geoDemo_PointJson is PointJson field
type geoDemo_PointJson struct {
	geo.GeometryStorage[*geo.Point, geo.S4326, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_PointJson creates a new geoDemo_PointJson
func newGeoDemo_PointJson(c *geoentityConfig) *geoDemo_PointJson {
	t := &geoDemo_PointJson{}
	t.config = c
	return t
}

// Set sets the value of PointJson field
func (t *geoDemo_PointJson) Set(v *geo.Point) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPointJson.Name.String())
	}
}

// Get gets the value of PointJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_PointJson) Get() **geo.Point {
	return t.GeometryStorage.Get()
}

// geoDemo_LineStringJson is LineStringJson field
type geoDemo_LineStringJson struct {
	geo.GeometryStorage[*geo.LineString, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_LineStringJson creates a new geoDemo_LineStringJson
func newGeoDemo_LineStringJson(c *geoentityConfig) *geoDemo_LineStringJson {
	t := &geoDemo_LineStringJson{}
	t.config = c
	return t
}

// Set sets the value of LineStringJson field
func (t *geoDemo_LineStringJson) Set(v *geo.LineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldLineStringJson.Name.String())
	}
}

// Get gets the value of LineStringJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_LineStringJson) Get() **geo.LineString {
	return t.GeometryStorage.Get()
}

// geoDemo_PolygonJson is PolygonJson field
type geoDemo_PolygonJson struct {
	geo.GeometryStorage[*geo.Polygon, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_PolygonJson creates a new geoDemo_PolygonJson
func newGeoDemo_PolygonJson(c *geoentityConfig) *geoDemo_PolygonJson {
	t := &geoDemo_PolygonJson{}
	t.config = c
	return t
}

// Set sets the value of PolygonJson field
func (t *geoDemo_PolygonJson) Set(v *geo.Polygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPolygonJson.Name.String())
	}
}

// Get gets the value of PolygonJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_PolygonJson) Get() **geo.Polygon {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiPointJson is MultiPointJson field
type geoDemo_MultiPointJson struct {
	geo.GeometryStorage[*geo.MultiPoint, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_MultiPointJson creates a new geoDemo_MultiPointJson
func newGeoDemo_MultiPointJson(c *geoentityConfig) *geoDemo_MultiPointJson {
	t := &geoDemo_MultiPointJson{}
	t.config = c
	return t
}

// Set sets the value of MultiPointJson field
func (t *geoDemo_MultiPointJson) Set(v *geo.MultiPoint) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPointJson.Name.String())
	}
}

// Get gets the value of MultiPointJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiPointJson) Get() **geo.MultiPoint {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiLineStringJson is MultiLineStringJson field
type geoDemo_MultiLineStringJson struct {
	geo.GeometryStorage[*geo.MultiLineString, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_MultiLineStringJson creates a new geoDemo_MultiLineStringJson
func newGeoDemo_MultiLineStringJson(c *geoentityConfig) *geoDemo_MultiLineStringJson {
	t := &geoDemo_MultiLineStringJson{}
	t.config = c
	return t
}

// Set sets the value of MultiLineStringJson field
func (t *geoDemo_MultiLineStringJson) Set(v *geo.MultiLineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiLineStringJson.Name.String())
	}
}

// Get gets the value of MultiLineStringJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiLineStringJson) Get() **geo.MultiLineString {
	return t.GeometryStorage.Get()
}

// geoDemo_MultiPolygonJson is MultiPolygonJson field
type geoDemo_MultiPolygonJson struct {
	geo.GeometryStorage[*geo.MultiPolygon, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemo_MultiPolygonJson creates a new geoDemo_MultiPolygonJson
func newGeoDemo_MultiPolygonJson(c *geoentityConfig) *geoDemo_MultiPolygonJson {
	t := &geoDemo_MultiPolygonJson{}
	t.config = c
	return t
}

// Set sets the value of MultiPolygonJson field
func (t *geoDemo_MultiPolygonJson) Set(v *geo.MultiPolygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPolygonJson.Name.String())
	}
}

// Get gets the value of MultiPolygonJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemo_MultiPolygonJson) Get() **geo.MultiPolygon {
	return t.GeometryStorage.Get()
}
