// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/geo_demo"

	"github.com/yohobala/taurus_go/datautil/geo"
	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/field"
)

// geoDemoID is ID field
type geoDemoID struct {
	field.IntStorage[int64]
	config *geoentityConfig
}

// newgeoDemoID creates a new geoDemoID
func newGeoDemoID(c *geoentityConfig) *geoDemoID {
	t := &geoDemoID{}
	t.config = c
	return t
}

// Set sets the value of ID field
func (t *geoDemoID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldID.Name.String())
	}
}

// Get gets the value of ID field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *geoDemoID) Get() int64 {
	return *t.IntStorage.Get()
}

// geoDemoPoint is Point field
type geoDemoPoint struct {
	geo.GeometryStorage[*geo.Point, geo.S4326, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoPoint creates a new geoDemoPoint
func newGeoDemoPoint(c *geoentityConfig) *geoDemoPoint {
	t := &geoDemoPoint{}
	t.config = c
	return t
}

// Set sets the value of Point field
func (t *geoDemoPoint) Set(v *geo.Point) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPoint.Name.String())
	}
}

// Get gets the value of Point field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoPoint) Get() **geo.Point {
	return t.GeometryStorage.Get()
}

// geoDemoLineString is LineString field
type geoDemoLineString struct {
	geo.GeometryStorage[*geo.LineString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoLineString creates a new geoDemoLineString
func newGeoDemoLineString(c *geoentityConfig) *geoDemoLineString {
	t := &geoDemoLineString{}
	t.config = c
	return t
}

// Set sets the value of LineString field
func (t *geoDemoLineString) Set(v *geo.LineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldLineString.Name.String())
	}
}

// Get gets the value of LineString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoLineString) Get() **geo.LineString {
	return t.GeometryStorage.Get()
}

// geoDemoPolygon is Polygon field
type geoDemoPolygon struct {
	geo.GeometryStorage[*geo.Polygon, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoPolygon creates a new geoDemoPolygon
func newGeoDemoPolygon(c *geoentityConfig) *geoDemoPolygon {
	t := &geoDemoPolygon{}
	t.config = c
	return t
}

// Set sets the value of Polygon field
func (t *geoDemoPolygon) Set(v *geo.Polygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPolygon.Name.String())
	}
}

// Get gets the value of Polygon field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoPolygon) Get() **geo.Polygon {
	return t.GeometryStorage.Get()
}

// geoDemoMultiPoint is MultiPoint field
type geoDemoMultiPoint struct {
	geo.GeometryStorage[*geo.MultiPoint, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoMultiPoint creates a new geoDemoMultiPoint
func newGeoDemoMultiPoint(c *geoentityConfig) *geoDemoMultiPoint {
	t := &geoDemoMultiPoint{}
	t.config = c
	return t
}

// Set sets the value of MultiPoint field
func (t *geoDemoMultiPoint) Set(v *geo.MultiPoint) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPoint.Name.String())
	}
}

// Get gets the value of MultiPoint field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiPoint) Get() **geo.MultiPoint {
	return t.GeometryStorage.Get()
}

// geoDemoMultiLineString is MultiLineString field
type geoDemoMultiLineString struct {
	geo.GeometryStorage[*geo.MultiLineString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoMultiLineString creates a new geoDemoMultiLineString
func newGeoDemoMultiLineString(c *geoentityConfig) *geoDemoMultiLineString {
	t := &geoDemoMultiLineString{}
	t.config = c
	return t
}

// Set sets the value of MultiLineString field
func (t *geoDemoMultiLineString) Set(v *geo.MultiLineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiLineString.Name.String())
	}
}

// Get gets the value of MultiLineString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiLineString) Get() **geo.MultiLineString {
	return t.GeometryStorage.Get()
}

// geoDemoMultiPolygon is MultiPolygon field
type geoDemoMultiPolygon struct {
	geo.GeometryStorage[*geo.MultiPolygon, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoMultiPolygon creates a new geoDemoMultiPolygon
func newGeoDemoMultiPolygon(c *geoentityConfig) *geoDemoMultiPolygon {
	t := &geoDemoMultiPolygon{}
	t.config = c
	return t
}

// Set sets the value of MultiPolygon field
func (t *geoDemoMultiPolygon) Set(v *geo.MultiPolygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPolygon.Name.String())
	}
}

// Get gets the value of MultiPolygon field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiPolygon) Get() **geo.MultiPolygon {
	return t.GeometryStorage.Get()
}

// geoDemoCircularString is CircularString field
type geoDemoCircularString struct {
	geo.GeometryStorage[*geo.CircularString, geo.SDefault, geo.GeomFromText]
	config *geoentityConfig
}

// newgeoDemoCircularString creates a new geoDemoCircularString
func newGeoDemoCircularString(c *geoentityConfig) *geoDemoCircularString {
	t := &geoDemoCircularString{}
	t.config = c
	return t
}

// Set sets the value of CircularString field
func (t *geoDemoCircularString) Set(v *geo.CircularString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldCircularString.Name.String())
	}
}

// Get gets the value of CircularString field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoCircularString) Get() **geo.CircularString {
	return t.GeometryStorage.Get()
}

// geoDemoPointJson is PointJson field
type geoDemoPointJson struct {
	geo.GeometryStorage[*geo.Point, geo.S4326, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoPointJson creates a new geoDemoPointJson
func newGeoDemoPointJson(c *geoentityConfig) *geoDemoPointJson {
	t := &geoDemoPointJson{}
	t.config = c
	return t
}

// Set sets the value of PointJson field
func (t *geoDemoPointJson) Set(v *geo.Point) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPointJson.Name.String())
	}
}

// Get gets the value of PointJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoPointJson) Get() **geo.Point {
	return t.GeometryStorage.Get()
}

// geoDemoLineStringJson is LineStringJson field
type geoDemoLineStringJson struct {
	geo.GeometryStorage[*geo.LineString, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoLineStringJson creates a new geoDemoLineStringJson
func newGeoDemoLineStringJson(c *geoentityConfig) *geoDemoLineStringJson {
	t := &geoDemoLineStringJson{}
	t.config = c
	return t
}

// Set sets the value of LineStringJson field
func (t *geoDemoLineStringJson) Set(v *geo.LineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldLineStringJson.Name.String())
	}
}

// Get gets the value of LineStringJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoLineStringJson) Get() **geo.LineString {
	return t.GeometryStorage.Get()
}

// geoDemoPolygonJson is PolygonJson field
type geoDemoPolygonJson struct {
	geo.GeometryStorage[*geo.Polygon, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoPolygonJson creates a new geoDemoPolygonJson
func newGeoDemoPolygonJson(c *geoentityConfig) *geoDemoPolygonJson {
	t := &geoDemoPolygonJson{}
	t.config = c
	return t
}

// Set sets the value of PolygonJson field
func (t *geoDemoPolygonJson) Set(v *geo.Polygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldPolygonJson.Name.String())
	}
}

// Get gets the value of PolygonJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoPolygonJson) Get() **geo.Polygon {
	return t.GeometryStorage.Get()
}

// geoDemoMultiPointJson is MultiPointJson field
type geoDemoMultiPointJson struct {
	geo.GeometryStorage[*geo.MultiPoint, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoMultiPointJson creates a new geoDemoMultiPointJson
func newGeoDemoMultiPointJson(c *geoentityConfig) *geoDemoMultiPointJson {
	t := &geoDemoMultiPointJson{}
	t.config = c
	return t
}

// Set sets the value of MultiPointJson field
func (t *geoDemoMultiPointJson) Set(v *geo.MultiPoint) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPointJson.Name.String())
	}
}

// Get gets the value of MultiPointJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiPointJson) Get() **geo.MultiPoint {
	return t.GeometryStorage.Get()
}

// geoDemoMultiLineStringJson is MultiLineStringJson field
type geoDemoMultiLineStringJson struct {
	geo.GeometryStorage[*geo.MultiLineString, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoMultiLineStringJson creates a new geoDemoMultiLineStringJson
func newGeoDemoMultiLineStringJson(c *geoentityConfig) *geoDemoMultiLineStringJson {
	t := &geoDemoMultiLineStringJson{}
	t.config = c
	return t
}

// Set sets the value of MultiLineStringJson field
func (t *geoDemoMultiLineStringJson) Set(v *geo.MultiLineString) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiLineStringJson.Name.String())
	}
}

// Get gets the value of MultiLineStringJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiLineStringJson) Get() **geo.MultiLineString {
	return t.GeometryStorage.Get()
}

// geoDemoMultiPolygonJson is MultiPolygonJson field
type geoDemoMultiPolygonJson struct {
	geo.GeometryStorage[*geo.MultiPolygon, geo.SDefault, geo.GeomFromGeoJSON]
	config *geoentityConfig
}

// newgeoDemoMultiPolygonJson creates a new geoDemoMultiPolygonJson
func newGeoDemoMultiPolygonJson(c *geoentityConfig) *geoDemoMultiPolygonJson {
	t := &geoDemoMultiPolygonJson{}
	t.config = c
	return t
}

// Set sets the value of MultiPolygonJson field
func (t *geoDemoMultiPolygonJson) Set(v *geo.MultiPolygon) {
	t.GeometryStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.geoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(geo_demo.FieldMultiPolygonJson.Name.String())
	}
}

// Get gets the value of MultiPolygonJson field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.

func (t *geoDemoMultiPolygonJson) Get() **geo.MultiPolygon {
	return t.GeometryStorage.Get()
}
