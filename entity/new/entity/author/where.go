// Code generated by taurus_go, DO NOT EDIT.

package author

import "github.com/yohobala/taurus_go/entity/entitysql"

type PredID struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredID) EQ(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldID.Name.String(), id)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredID) NEQ(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldID.Name.String(), id)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredID) GT(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.GT(FieldID.Name.String(), id)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredID) GTE(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldID.Name.String(), id)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredID) LT(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.LT(FieldID.Name.String(), id)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredID) LTE(id int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldID.Name.String(), id)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredID) In(ids ...int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		p.In(FieldID.Name.String(), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredID) NotIn(ids ...int64) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		p.NotIn(FieldID.Name.String(), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredID) Like(id string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.Like(FieldID.Name.String(), id)
	}
}

type PredName struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredName) EQ(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldName.Name.String(), name)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredName) NEQ(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldName.Name.String(), name)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredName) GT(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.GT(FieldName.Name.String(), name)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredName) GTE(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldName.Name.String(), name)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredName) LT(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.LT(FieldName.Name.String(), name)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredName) LTE(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldName.Name.String(), name)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredName) In(names ...string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(names))
		for i := range v {
			v[i] = names[i]
		}
		p.In(FieldName.Name.String(), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredName) NotIn(names ...string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(names))
		for i := range v {
			v[i] = names[i]
		}
		p.NotIn(FieldName.Name.String(), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredName) Like(name string) func(*entitysql.Predicate) {
	return func(p *entitysql.Predicate) {
		p.Like(FieldName.Name.String(), name)
	}
}
