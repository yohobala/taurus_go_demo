// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"context"
	"taurus_go_demo/entity/new/entity/geo_demo"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/zodileap/taurus_go/datautil/geo"
	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/dialect"
	"github.com/zodileap/taurus_go/entity/entitysql"
)

// geoentityBuilder is a builder for the GeoEntity entity.
//
// The builder is used to create, update, and delete GeoEntity entities.
type geoentityBuilder struct {
	config              *geoentityConfig
	tracker             entity.Tracker
	Id                  geo_demo.PredID                  // Id 主键。
	Point               geo_demo.PredPoint               // Point 点
	LineString          geo_demo.PredLineString          // LineString 线
	Polygon             geo_demo.PredPolygon             // Polygon 多边形
	MultiPoint          geo_demo.PredMultiPoint          // MultiPoint 多点
	MultiLineString     geo_demo.PredMultiLineString     // MultiLineString 多线
	MultiPolygon        geo_demo.PredMultiPolygon        // MultiPolygon 多多边形
	CircularString      geo_demo.PredCircularString      // CircularString 圆弧
	PointJson           geo_demo.PredPointJson           // PointJson 点
	LineStringJson      geo_demo.PredLineStringJson      // LineStringJson 线
	PolygonJson         geo_demo.PredPolygonJson         // PolygonJson 多边形
	MultiPointJson      geo_demo.PredMultiPointJson      // MultiPointJson 多点
	MultiLineStringJson geo_demo.PredMultiLineStringJson // MultiLineStringJson 多线
	MultiPolygonJson    geo_demo.PredMultiPolygonJson    // MultiPolygonJson 多多边形
	// ByID configures the query to sort results based on the 'id' field of the entity.
	// Sorting entities in ascending order by default.
	ByID geo_demo.ByID
	// ByPoint configures the query to sort results based on the 'point' field of the entity.
	// Sorting entities in ascending order by default.
	ByPoint geo_demo.ByPoint
	// ByLineString configures the query to sort results based on the 'line_string' field of the entity.
	// Sorting entities in ascending order by default.
	ByLineString geo_demo.ByLineString
	// ByPolygon configures the query to sort results based on the 'polygon' field of the entity.
	// Sorting entities in ascending order by default.
	ByPolygon geo_demo.ByPolygon
	// ByMultiPoint configures the query to sort results based on the 'multi_point' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiPoint geo_demo.ByMultiPoint
	// ByMultiLineString configures the query to sort results based on the 'multi_line_string' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiLineString geo_demo.ByMultiLineString
	// ByMultiPolygon configures the query to sort results based on the 'multi_polygon' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiPolygon geo_demo.ByMultiPolygon
	// ByCircularString configures the query to sort results based on the 'circular_string' field of the entity.
	// Sorting entities in ascending order by default.
	ByCircularString geo_demo.ByCircularString
	// ByPointJson configures the query to sort results based on the 'point_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByPointJson geo_demo.ByPointJson
	// ByLineStringJson configures the query to sort results based on the 'line_string_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByLineStringJson geo_demo.ByLineStringJson
	// ByPolygonJson configures the query to sort results based on the 'polygon_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByPolygonJson geo_demo.ByPolygonJson
	// ByMultiPointJson configures the query to sort results based on the 'multi_point_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiPointJson geo_demo.ByMultiPointJson
	// ByMultiLineStringJson configures the query to sort results based on the 'multi_line_string_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiLineStringJson geo_demo.ByMultiLineStringJson
	// ByMultiPolygonJson configures the query to sort results based on the 'multi_polygon_json' field of the entity.
	// Sorting entities in ascending order by default.
	ByMultiPolygonJson geo_demo.ByMultiPolygonJson
}

// newGeoEntityBuilder creates a new GeoEntityBuilder .
func newGeoEntityBuilder(c *geoentityConfig, t entity.Tracker) *geoentityBuilder {
	return &geoentityBuilder{
		config:  c,
		tracker: t,
	}
}

// Create creates a new UserEntity，and add it to the tracker.
// Required parameters are fields that have no default value but are required,
// and options are fields that can be left empty by calling WithFieldName.
func (b *geoentityBuilder) Create(options ...func(*GeoEntity)) (*GeoEntity, error) {
	e := b.config.New()
	switch t := e.(type) {
	case *GeoEntity:
		return t.create(options...)
	default:
		return nil, entity.Err_0100030006
	}
}

func (b *geoentityBuilder) Remove(e *GeoEntity) error {
	if e.config.Mutation == nil {
		return nil
	}
	return e.remove()
}

// First returns the first GeoEntity.
func (s *geoentityBuilder) First(ctx context.Context) (*GeoEntity, error) {
	query := s.initQuery()
	return query.First(ctx)
}

func (s *geoentityBuilder) ToList(ctx context.Context) ([]*GeoEntity, error) {
	query := s.initQuery()
	return query.ToList(ctx)
}

func (s *geoentityBuilder) Include(rels ...geoentityRel) *GeoEntityQuery {
	query := s.initQuery()
	return query.Include(rels...)
}

func (s *geoentityBuilder) Order(o ...geo_demo.OrderTerm) *GeoEntityQuery {
	query := s.initQuery()
	return query.Order(o...)
}

func (s *geoentityBuilder) Where(conditions ...entitysql.PredicateFunc) *GeoEntityQuery {
	query := s.initQuery()
	return query.Where(conditions...)
}

// WithID sets the "id" field of the GeoEntity.
func (s *geoentityBuilder) WithID(id int64) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.Id.Set(id)
	}
}

// WithPoint sets the "point" field of the GeoEntity.
func (s *geoentityBuilder) WithPoint(point *geo.Point) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.Point.Set(point)
	}
}

// WithLineString sets the "line_string" field of the GeoEntity.
func (s *geoentityBuilder) WithLineString(linestring *geo.LineString) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.LineString.Set(linestring)
	}
}

// WithPolygon sets the "polygon" field of the GeoEntity.
func (s *geoentityBuilder) WithPolygon(polygon *geo.Polygon) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.Polygon.Set(polygon)
	}
}

// WithMultiPoint sets the "multi_point" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiPoint(multipoint *geo.MultiPoint) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiPoint.Set(multipoint)
	}
}

// WithMultiLineString sets the "multi_line_string" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiLineString(multilinestring *geo.MultiLineString) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiLineString.Set(multilinestring)
	}
}

// WithMultiPolygon sets the "multi_polygon" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiPolygon(multipolygon *geo.MultiPolygon) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiPolygon.Set(multipolygon)
	}
}

// WithCircularString sets the "circular_string" field of the GeoEntity.
func (s *geoentityBuilder) WithCircularString(circularstring *geo.CircularString) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.CircularString.Set(circularstring)
	}
}

// WithPointJson sets the "point_json" field of the GeoEntity.
func (s *geoentityBuilder) WithPointJson(pointjson *geo.Point) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.PointJson.Set(pointjson)
	}
}

// WithLineStringJson sets the "line_string_json" field of the GeoEntity.
func (s *geoentityBuilder) WithLineStringJson(linestringjson *geo.LineString) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.LineStringJson.Set(linestringjson)
	}
}

// WithPolygonJson sets the "polygon_json" field of the GeoEntity.
func (s *geoentityBuilder) WithPolygonJson(polygonjson *geo.Polygon) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.PolygonJson.Set(polygonjson)
	}
}

// WithMultiPointJson sets the "multi_point_json" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiPointJson(multipointjson *geo.MultiPoint) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiPointJson.Set(multipointjson)
	}
}

// WithMultiLineStringJson sets the "multi_line_string_json" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiLineStringJson(multilinestringjson *geo.MultiLineString) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiLineStringJson.Set(multilinestringjson)
	}
}

// WithMultiPolygonJson sets the "multi_polygon_json" field of the GeoEntity.
func (s *geoentityBuilder) WithMultiPolygonJson(multipolygonjson *geo.MultiPolygon) func(*GeoEntity) {
	return func(e *GeoEntity) {
		e.MultiPolygonJson.Set(multipolygonjson)
	}
}

// Exec executes all the geoentityMutations for the GeoEntity.
func (s *geoentityBuilder) Exec(ctx context.Context, tx dialect.Tx) error {
	if len(s.config.geoentityMutations.Addeds) > 0 {
		e := s.config.geoentityMutations.Get(entity.Added)
		n := newGeoEntityCreate(s.config.Dialect, e...)
		if err := n.create(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.geoentityMutations.Modifieds) > 0 {
		e := s.config.geoentityMutations.Get(entity.Modified)
		n := newGeoEntityUpdate(s.config.Dialect, e...)
		if err := n.update(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.geoentityMutations.Deleteds) > 0 {
		e := s.config.geoentityMutations.Get(entity.Deleted)
		n := newGeoEntityDelete(s.config.Dialect, e...)
		if err := n.delete(ctx, tx); err != nil {
			return err
		}
	}
	return nil
}

func (s *geoentityBuilder) initQuery() *GeoEntityQuery {
	return newGeoEntityQuery(s.config.Dialect, s.tracker, s.config.geoentityMutations)
}

// geoentityMutations is a collection of GeoEntity mutation.
type geoentityMutations struct {
	Detacheds  map[string]*GeoEntity
	Unchangeds map[string]*GeoEntity
	Deleteds   map[string]*GeoEntity
	Modifieds  map[string]*GeoEntity
	Addeds     map[string]*GeoEntity
}

// newGeoEntityMutations creates a new mutations.
func newGeoEntityMutations() *geoentityMutations {
	return &geoentityMutations{
		Detacheds:  make(map[string]*GeoEntity),
		Unchangeds: make(map[string]*GeoEntity),
		Deleteds:   make(map[string]*GeoEntity),
		Modifieds:  make(map[string]*GeoEntity),
		Addeds:     make(map[string]*GeoEntity),
	}
}

// Get returns all the GeoEntity in the specified state.
func (ms *geoentityMutations) Get(state entity.EntityState) []*GeoEntity {
	switch state {
	case entity.Detached:
		s := make([]*GeoEntity, 0, len(ms.Detacheds))
		for _, m := range ms.Detacheds {
			s = append(s, m)
		}
		return s
	case entity.Unchanged:
		s := make([]*GeoEntity, 0, len(ms.Unchangeds))
		for _, m := range ms.Unchangeds {
			s = append(s, m)
		}
		return s
	case entity.Deleted:
		s := make([]*GeoEntity, 0, len(ms.Deleteds))
		for _, m := range ms.Deleteds {
			s = append(s, m)
		}
		return s
	case entity.Modified:
		s := make([]*GeoEntity, 0, len(ms.Modifieds))
		for _, m := range ms.Modifieds {
			s = append(s, m)
		}
		return s
	case entity.Added:
		s := make([]*GeoEntity, 0, len(ms.Addeds))
		for _, m := range ms.Addeds {
			s = append(s, m)
		}
		return s
	}
	return nil
}

// SetEntityState sets the state of the entity.
func (ms *geoentityMutations) SetEntityState(e *GeoEntity, state entity.EntityState) error {
	m := e.config.Mutation
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return err
	}
	return nil
}

// ChangeEntityState attempts to set the desired entity state,
// but will not do so if the conditions are not met.
func (ms *geoentityMutations) ChangeEntityState(m *entity.Mutation, state entity.EntityState) {
	e := ms.getEntity(m)
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return
	}
}

// getEntity returns the entity in the specified state.
func (ms *geoentityMutations) getEntity(m *entity.Mutation) *GeoEntity {
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		return ms.Detacheds[key]
	case entity.Unchanged:
		return ms.Unchangeds[key]
	case entity.Deleted:
		return ms.Deleteds[key]
	case entity.Modified:
		return ms.Modifieds[key]
	case entity.Added:
		return ms.Addeds[key]
	}
	return nil
}

// Set sets the entity in the specified state.
func (ms *geoentityMutations) set(e *GeoEntity, state entity.EntityState) {
	m := e.config.Mutation
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		delete(ms.Detacheds, key)
	case entity.Unchanged:
		delete(ms.Unchangeds, key)
	case entity.Deleted:
		delete(ms.Deleteds, key)
	case entity.Modified:
		delete(ms.Modifieds, key)
	case entity.Added:
		delete(ms.Addeds, key)
	}
	if state >= 0 {
		switch state {
		case entity.Detached:
			ms.Detacheds[key] = e
		case entity.Unchanged:
			ms.Unchangeds[key] = e
		case entity.Deleted:
			ms.Deleteds[key] = e
		case entity.Modified:
			ms.Modifieds[key] = e
		case entity.Added:
			ms.Addeds[key] = e
		}
	}
}
