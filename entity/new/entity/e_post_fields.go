// Code generated by taurus_go, DO NOT EDIT.

package entity

import (
	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/field"

	"taurus_go_demo/entity/new/entity/post"
)

// PostID is ID field
type PostID struct {
	field.IntStorage[int64]
	config *PostEntityConfig
}

// newPostID creates a new IDType
func newPostID(c *PostEntityConfig) *PostID {
	t := &PostID{}
	t.config = c
	return t
}

// Set sets the value of ID field
func (t *PostID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.postMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldID.Name.String())
	}
}

// Get gets the value of ID field
func (t *PostID) Get() *int64 {
	return t.IntStorage.Get()
}

// PostContent is Content field
type PostContent struct {
	field.StringStorage
	config *PostEntityConfig
}

// newPostContent creates a new ContentType
func newPostContent(c *PostEntityConfig) *PostContent {
	t := &PostContent{}
	t.config = c
	return t
}

// Set sets the value of Content field
func (t *PostContent) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.postMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldContent.Name.String())
	}
}

// Get gets the value of Content field
func (t *PostContent) Get() *string {
	return t.StringStorage.Get()
}

// PostBlogID is BlogID field
type PostBlogID struct {
	field.IntStorage[int64]
	config *PostEntityConfig
}

// newPostBlogID creates a new BlogIDType
func newPostBlogID(c *PostEntityConfig) *PostBlogID {
	t := &PostBlogID{}
	t.config = c
	return t
}

// Set sets the value of BlogID field
func (t *PostBlogID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.postMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldBlogID.Name.String())
	}
}

// Get gets the value of BlogID field
func (t *PostBlogID) Get() *int64 {
	return t.IntStorage.Get()
}

// PostAuthorID is AuthorID field
type PostAuthorID struct {
	field.IntStorage[int64]
	config *PostEntityConfig
}

// newPostAuthorID creates a new AuthorIDType
func newPostAuthorID(c *PostEntityConfig) *PostAuthorID {
	t := &PostAuthorID{}
	t.config = c
	return t
}

// Set sets the value of AuthorID field
func (t *PostAuthorID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.postMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldAuthorID.Name.String())
	}
}

// Get gets the value of AuthorID field
func (t *PostAuthorID) Get() *int64 {
	return t.IntStorage.Get()
}
