// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/post"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/field"
)

// post_ID is Id field
type post_ID struct {
	field.IntStorage[int64]
	config *postentityConfig
}

// newpost_ID creates a new post_ID
func newPost_ID(c *postentityConfig) *post_ID {
	t := &post_ID{}
	t.config = c
	return t
}

// Set sets the value of Id field
func (t *post_ID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.postentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldID.Name.String())
	}
}

// Get gets the value of Id field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *post_ID) Get() int64 {
	return *t.IntStorage.Get()
}

// post_Content is Content field
type post_Content struct {
	field.StringStorage[string]
	config *postentityConfig
}

// newpost_Content creates a new post_Content
func newPost_Content(c *postentityConfig) *post_Content {
	t := &post_Content{}
	t.config = c
	return t
}

// Set sets the value of Content field
func (t *post_Content) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.postentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldContent.Name.String())
	}
}

// Get gets the value of Content field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *post_Content) Get() string {
	return *t.StringStorage.Get()
}

// post_BlogID is BlogID field
type post_BlogID struct {
	field.IntStorage[int64]
	config *postentityConfig
}

// newpost_BlogID creates a new post_BlogID
func newPost_BlogID(c *postentityConfig) *post_BlogID {
	t := &post_BlogID{}
	t.config = c
	return t
}

// Set sets the value of BlogID field
func (t *post_BlogID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.postentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldBlogID.Name.String())
	}
}

// Get gets the value of BlogID field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *post_BlogID) Get() int64 {
	return *t.IntStorage.Get()
}

// post_AuthorID is AuthorID field
type post_AuthorID struct {
	field.IntStorage[int64]
	config *postentityConfig
}

// newpost_AuthorID creates a new post_AuthorID
func newPost_AuthorID(c *postentityConfig) *post_AuthorID {
	t := &post_AuthorID{}
	t.config = c
	return t
}

// Set sets the value of AuthorID field
func (t *post_AuthorID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.postentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(post.FieldAuthorID.Name.String())
	}
}

// Get gets the value of AuthorID field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *post_AuthorID) Get() int64 {
	return *t.IntStorage.Get()
}
