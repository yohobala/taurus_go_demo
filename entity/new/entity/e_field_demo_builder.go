// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"context"
	"taurus_go_demo/entity/new/entity/field_demo"
	"taurus_go_demo/entity/new/entity/internal"
	"taurus_go_demo/entity/new/entity/schema"
	"time"

	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/dialect"
	"github.com/yohobala/taurus_go/entity/entitysql"
)

// fielddemoentityBuilder is a builder for the FieldDemoEntity entity.
//
// The builder is used to create, update, and delete FieldDemoEntity entities.
type fielddemoentityBuilder struct {
	config       *fielddemoentityConfig
	tracker      entity.Tracker
	Int64F       field_demo.PredInt64F       // Int64F Int64 field
	VarF         field_demo.PredVarF         // VarF Varchar field
	BoolF        field_demo.PredBoolF        // BoolF Bool field
	IntArrayF    field_demo.PredIntArrayF    // IntArrayF Int array field
	Intarray2F   field_demo.PredIntarray2F   // Intarray2F Int array2 field
	StringArrayF field_demo.PredStringArrayF // StringArrayF String array field
	BoolArrayF   field_demo.PredBoolArrayF   // BoolArrayF Bool array field
	TimeF        field_demo.PredTimeF        // TimeF Time field
	TimeArrayF   field_demo.PredTimeArrayF   // TimeArrayF Time array field
	JsonF        field_demo.PredJsonF        // JsonF Json field
	// ByInt64F configures the query to sort results based on the 'int64_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByInt64F field_demo.ByInt64F
	// ByVarF configures the query to sort results based on the 'var_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByVarF field_demo.ByVarF
	// ByBoolF configures the query to sort results based on the 'bool_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByBoolF field_demo.ByBoolF
	// ByIntArrayF configures the query to sort results based on the 'int_array_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByIntArrayF field_demo.ByIntArrayF
	// ByIntarray2F configures the query to sort results based on the 'int_array2_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByIntarray2F field_demo.ByIntarray2F
	// ByStringArrayF configures the query to sort results based on the 'string_array_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByStringArrayF field_demo.ByStringArrayF
	// ByBoolArrayF configures the query to sort results based on the 'bool_array_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByBoolArrayF field_demo.ByBoolArrayF
	// ByTimeF configures the query to sort results based on the 'time_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByTimeF field_demo.ByTimeF
	// ByTimeArrayF configures the query to sort results based on the 'time_array_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByTimeArrayF field_demo.ByTimeArrayF
	// ByJsonF configures the query to sort results based on the 'json_f' field of the entity.
	// Sorting entities in ascending order by default.
	ByJsonF field_demo.ByJsonF
}

// newFieldDemoEntityBuilder creates a new FieldDemoEntityBuilder .
func newFieldDemoEntityBuilder(c *fielddemoentityConfig, t entity.Tracker) *fielddemoentityBuilder {
	return &fielddemoentityBuilder{
		config:  c,
		tracker: t,
	}
}

// Create creates a new UserEntityï¼Œand add it to the tracker.
// Required parameters are fields that have no default value but are required,
// and options are fields that can be left empty by calling WithFieldName.
func (b *fielddemoentityBuilder) Create(int64_f int64, var_f string, bool_f bool, int_array_f []int64, int_array2_f [][]int64, string_array_f []string, bool_array_f []bool, time_f time.Time, time_array_f []time.Time, options ...func(*FieldDemoEntity)) (*FieldDemoEntity, error) {
	e := b.config.New()
	switch t := e.(type) {
	case *FieldDemoEntity:
		return t.create(int64_f, var_f, bool_f, int_array_f, int_array2_f, string_array_f, bool_array_f, time_f, time_array_f, options...)
	default:
		return nil, entity.Err_0100030006
	}
}

func (b *fielddemoentityBuilder) Remove(e *FieldDemoEntity) error {
	if e.config.Mutation == nil {
		return nil
	}
	return e.remove()
}

// First returns the first FieldDemoEntity.
func (s *fielddemoentityBuilder) First(ctx context.Context) (*FieldDemoEntity, error) {
	query := s.initQuery()
	return query.First(ctx)
}

func (s *fielddemoentityBuilder) ToList(ctx context.Context) ([]*FieldDemoEntity, error) {
	query := s.initQuery()
	return query.ToList(ctx)
}

func (s *fielddemoentityBuilder) Include(rels ...fielddemoentityRel) *FieldDemoEntityQuery {
	query := s.initQuery()
	return query.Include(rels...)
}

func (s *fielddemoentityBuilder) Order(o ...field_demo.OrderTerm) *FieldDemoEntityQuery {
	query := s.initQuery()
	return query.Order(o...)
}

func (s *fielddemoentityBuilder) Where(conditions ...entitysql.PredicateFunc) *FieldDemoEntityQuery {
	query := s.initQuery()
	return query.Where(conditions...)
}

// WithJsonF sets the "json_f" field of the FieldDemoEntity.
func (s *fielddemoentityBuilder) WithJsonF(jsonf schema.JsonFStruct) func(*FieldDemoEntity) {
	return func(e *FieldDemoEntity) {
		e.JsonF.Set(jsonf)
	}
}

// Exec executes all the fielddemoentityMutations for the FieldDemoEntity.
func (s *fielddemoentityBuilder) Exec(ctx context.Context, tx dialect.Tx) error {
	if len(s.config.fielddemoentityMutations.Addeds) > 0 {
		e := s.config.fielddemoentityMutations.Get(entity.Added)
		n := newFieldDemoEntityCreate(s.config.Dialect, e...)
		if err := n.create(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.fielddemoentityMutations.Modifieds) > 0 {
		e := s.config.fielddemoentityMutations.Get(entity.Modified)
		n := newFieldDemoEntityUpdate(s.config.Dialect, e...)
		if err := n.update(ctx, tx); err != nil {
			return err
		}
	}
	if len(s.config.fielddemoentityMutations.Deleteds) > 0 {
		e := s.config.fielddemoentityMutations.Get(entity.Deleted)
		n := newFieldDemoEntityDelete(s.config.Dialect, e...)
		if err := n.delete(ctx, tx); err != nil {
			return err
		}
	}
	return nil
}

func (s *fielddemoentityBuilder) initQuery() *FieldDemoEntityQuery {
	return newFieldDemoEntityQuery(s.config.Dialect, s.tracker, s.config.fielddemoentityMutations)
}

// fielddemoentityMutations is a collection of FieldDemoEntity mutation.
type fielddemoentityMutations struct {
	Detacheds  map[string]*FieldDemoEntity
	Unchangeds map[string]*FieldDemoEntity
	Deleteds   map[string]*FieldDemoEntity
	Modifieds  map[string]*FieldDemoEntity
	Addeds     map[string]*FieldDemoEntity
}

// newFieldDemoEntityMutations creates a new mutations.
func newFieldDemoEntityMutations() *fielddemoentityMutations {
	return &fielddemoentityMutations{
		Detacheds:  make(map[string]*FieldDemoEntity),
		Unchangeds: make(map[string]*FieldDemoEntity),
		Deleteds:   make(map[string]*FieldDemoEntity),
		Modifieds:  make(map[string]*FieldDemoEntity),
		Addeds:     make(map[string]*FieldDemoEntity),
	}
}

// Get returns all the FieldDemoEntity in the specified state.
func (ms *fielddemoentityMutations) Get(state entity.EntityState) []*FieldDemoEntity {
	switch state {
	case entity.Detached:
		s := make([]*FieldDemoEntity, 0, len(ms.Detacheds))
		for _, m := range ms.Detacheds {
			s = append(s, m)
		}
		return s
	case entity.Unchanged:
		s := make([]*FieldDemoEntity, 0, len(ms.Unchangeds))
		for _, m := range ms.Unchangeds {
			s = append(s, m)
		}
		return s
	case entity.Deleted:
		s := make([]*FieldDemoEntity, 0, len(ms.Deleteds))
		for _, m := range ms.Deleteds {
			s = append(s, m)
		}
		return s
	case entity.Modified:
		s := make([]*FieldDemoEntity, 0, len(ms.Modifieds))
		for _, m := range ms.Modifieds {
			s = append(s, m)
		}
		return s
	case entity.Added:
		s := make([]*FieldDemoEntity, 0, len(ms.Addeds))
		for _, m := range ms.Addeds {
			s = append(s, m)
		}
		return s
	}
	return nil
}

// SetEntityState sets the state of the entity.
func (ms *fielddemoentityMutations) SetEntityState(e *FieldDemoEntity, state entity.EntityState) error {
	m := e.config.Mutation
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return err
	}
	return nil
}

// ChangeEntityState attempts to set the desired entity state,
// but will not do so if the conditions are not met.
func (ms *fielddemoentityMutations) ChangeEntityState(m *entity.Mutation, state entity.EntityState) {
	e := ms.getEntity(m)
	ms.set(e, state)
	if err := internal.SetEntityState(m, state); err != nil {
		return
	}
}

// getEntity returns the entity in the specified state.
func (ms *fielddemoentityMutations) getEntity(m *entity.Mutation) *FieldDemoEntity {
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		return ms.Detacheds[key]
	case entity.Unchanged:
		return ms.Unchangeds[key]
	case entity.Deleted:
		return ms.Deleteds[key]
	case entity.Modified:
		return ms.Modifieds[key]
	case entity.Added:
		return ms.Addeds[key]
	}
	return nil
}

// Set sets the entity in the specified state.
func (ms *fielddemoentityMutations) set(e *FieldDemoEntity, state entity.EntityState) {
	m := e.config.Mutation
	key := m.Key()
	switch m.State() {
	case entity.Detached:
		delete(ms.Detacheds, key)
	case entity.Unchanged:
		delete(ms.Unchangeds, key)
	case entity.Deleted:
		delete(ms.Deleteds, key)
	case entity.Modified:
		delete(ms.Modifieds, key)
	case entity.Added:
		delete(ms.Addeds, key)
	}
	if state >= 0 {
		switch state {
		case entity.Detached:
			ms.Detacheds[key] = e
		case entity.Unchanged:
			ms.Unchangeds[key] = e
		case entity.Deleted:
			ms.Deleteds[key] = e
		case entity.Modified:
			ms.Modifieds[key] = e
		case entity.Added:
			ms.Addeds[key] = e
		}
	}
}
