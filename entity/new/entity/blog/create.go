// Code generated by taurus_go, DO NOT EDIT.

package blog

import (
	"context"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/yohobala/taurus_go/entity/dialect"
	"github.com/yohobala/taurus_go/entity/entitysql"
)

// BlogEntityCreate is the create action for the BlogEntity.
type BlogEntityCreate struct {
	config *internal.Config
	es     []*BlogEntity
}

// NewBlogEntityCreate creates a new BlogEntityCreate.
func NewBlogEntityCreate(c *internal.Config, es ...*BlogEntity) *BlogEntityCreate {
	return &BlogEntityCreate{
		config: c,
		es:     es,
	}
}

// create executes the create action.
func (o *BlogEntityCreate) create(ctx context.Context, tx dialect.Tx) error {
	return o.sqlCreate(ctx, tx)
}

// sqlCreate executes the SQL create action.
func (o *BlogEntityCreate) sqlCreate(ctx context.Context, tx dialect.Tx) error {
	var (
		spec, err = o.createSpec()
		res       = o.es
		cursor    = 0
	)
	if err != nil {
		return err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.FieldName) error {
		e := res[cursor]
		cursor++
		if err := scan(e, fields, rows); err != nil {
			return err
		} else {
			res = append(res, e)
			return e.setUnchanged()
		}
	}
	return entitysql.NewCreate(ctx, tx, spec)
}

// createSpec creates the create action spec. It checks for required fields and sets the returning fields.
func (o *BlogEntityCreate) createSpec() (*entitysql.CreateSpec, error) {
	returning := []entitysql.FieldName{
		FieldID.Name,
		FieldCreatedTime.Name,
	}
	spec := entitysql.NewCreateSpec(Entity, columns)
	spec.Fields = make([][]*entitysql.FieldSpec, 0, len(o.es))
	for _, e := range o.es {
		fields := make([]*entitysql.FieldSpec, 0, len(columns))
		for j := range columns {
			switch columns[j] {
			case FieldUUID.Name:
				if err := spec.CheckRequired(FieldUUID.Name, e.UUID); err != nil {
					return nil, err
				}
				fields = append(fields, &entitysql.FieldSpec{
					Column: FieldUUID.Name.String(),
					Value:  e.UUID.Value(),
				})
			case FieldDesc.Name:
				fields = append(fields, &entitysql.FieldSpec{
					Column: FieldDesc.Name.String(),
					Value:  e.Desc.Value(),
				})
			}
		}
		spec.Fields = append(spec.Fields, fields)
	}
	spec.Returning = returning
	return spec, nil
}
