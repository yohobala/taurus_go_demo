// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"context"
	"taurus_go_demo/entity/new/entity/internal"
	"taurus_go_demo/entity/new/entity/post"

	"github.com/yohobala/taurus_go/entity/dialect"
	"github.com/yohobala/taurus_go/entity/entitysql"
)

// PostEntityCreate is the create action for the PostEntity.
type PostEntityCreate struct {
	config *internal.Dialect
	es     []*PostEntity
}

// newPostEntityCreate creates a new PostEntityCreate.
func newPostEntityCreate(c *internal.Dialect, es ...*PostEntity) *PostEntityCreate {
	return &PostEntityCreate{
		config: c,
		es:     es,
	}
}

// create executes the create action.
func (o *PostEntityCreate) create(ctx context.Context, tx dialect.Tx) error {
	return o.sqlCreate(ctx, tx)
}

// sqlCreate executes the SQL create action.
func (o *PostEntityCreate) sqlCreate(ctx context.Context, tx dialect.Tx) error {
	var (
		spec, err = o.createSpec()
		res       = o.es
		cursor    = 0
	)
	if err != nil {
		return err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.ScannerField) error {
		e := res[cursor]
		cursor++
		args := e.scan(fields)
		if err := rows.Scan(args...); err != nil {
			return err
		} else {
			res = append(res, e)
			return e.setUnchanged()
		}
	}
	return entitysql.NewCreate(ctx, tx, spec)
}

// createSpec creates the create action spec. It checks for required fields and sets the returning fields.
func (o *PostEntityCreate) createSpec() (*entitysql.CreateSpec, error) {
	returning := []entitysql.FieldName{
		post.FieldID.Name,
	}
	entity := post.Entity
	columns := post.Columns
	spec := entitysql.NewCreateSpec(entity, columns)
	spec.Fields = make([][]*entitysql.FieldSpec, 0, len(o.es))
	for _, e := range o.es {
		fields := make([]*entitysql.FieldSpec, 0, len(post.Columns))
		for j := range post.Columns {
			switch post.Columns[j] {
			case post.FieldID.Name:
				v, err := e.ID.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(post.FieldID.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.ID.SqlFormatParam()
				fieldSpace.Default = true
				fields = append(fields, &fieldSpace)
			case post.FieldContent.Name:
				v, err := e.Content.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), post.FieldContent.Name, e.Content); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(post.FieldContent.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.Content.SqlFormatParam()
				fieldSpace.Default = false
				fields = append(fields, &fieldSpace)
			case post.FieldBlogID.Name:
				v, err := e.BlogID.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), post.FieldBlogID.Name, e.BlogID); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(post.FieldBlogID.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.BlogID.SqlFormatParam()
				fieldSpace.Default = false
				fields = append(fields, &fieldSpace)
			case post.FieldAuthorID.Name:
				v, err := e.AuthorID.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), post.FieldAuthorID.Name, e.AuthorID); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(post.FieldAuthorID.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.AuthorID.SqlFormatParam()
				fieldSpace.Default = false
				fields = append(fields, &fieldSpace)
			}
		}
		spec.Fields = append(spec.Fields, fields)
	}
	spec.Returning = returning
	return spec, nil
}
