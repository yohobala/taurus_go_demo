// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/field_demo"
	"time"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/field"
)

// fieldDemo_Int64F is Int64F field
type fieldDemo_Int64F struct {
	field.IntStorage[int64]
	config *fielddemoentityConfig
}

// newfieldDemo_Int64F creates a new fieldDemo_Int64F
func newFieldDemo_Int64F(c *fielddemoentityConfig) *fieldDemo_Int64F {
	t := &fieldDemo_Int64F{}
	t.config = c
	return t
}

// Set sets the value of Int64F field
func (t *fieldDemo_Int64F) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldInt64F.Name.String())
	}
}

// Get gets the value of Int64F field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_Int64F) Get() int64 {
	return *t.IntStorage.Get()
}

// fieldDemo_VarF is VarF field
type fieldDemo_VarF struct {
	field.StringStorage[string]
	config *fielddemoentityConfig
}

// newfieldDemo_VarF creates a new fieldDemo_VarF
func newFieldDemo_VarF(c *fielddemoentityConfig) *fieldDemo_VarF {
	t := &fieldDemo_VarF{}
	t.config = c
	return t
}

// Set sets the value of VarF field
func (t *fieldDemo_VarF) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldVarF.Name.String())
	}
}

// Get gets the value of VarF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_VarF) Get() string {
	return *t.StringStorage.Get()
}

// fieldDemo_BoolF is BoolF field
type fieldDemo_BoolF struct {
	field.BoolStorage[bool]
	config *fielddemoentityConfig
}

// newfieldDemo_BoolF creates a new fieldDemo_BoolF
func newFieldDemo_BoolF(c *fielddemoentityConfig) *fieldDemo_BoolF {
	t := &fieldDemo_BoolF{}
	t.config = c
	return t
}

// Set sets the value of BoolF field
func (t *fieldDemo_BoolF) Set(v bool) {
	t.BoolStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldBoolF.Name.String())
	}
}

// Get gets the value of BoolF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_BoolF) Get() bool {
	return *t.BoolStorage.Get()
}

// fieldDemo_IntArrayF is IntArrayF field
type fieldDemo_IntArrayF struct {
	field.IntStorage[[]int64]
	config *fielddemoentityConfig
}

// newfieldDemo_IntArrayF creates a new fieldDemo_IntArrayF
func newFieldDemo_IntArrayF(c *fielddemoentityConfig) *fieldDemo_IntArrayF {
	t := &fieldDemo_IntArrayF{}
	t.config = c
	return t
}

// Set sets the value of IntArrayF field
func (t *fieldDemo_IntArrayF) Set(v []int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldIntArrayF.Name.String())
	}
}

// Get gets the value of IntArrayF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_IntArrayF) Get() []int64 {
	return *t.IntStorage.Get()
}

// fieldDemo_Intarray2F is Intarray2F field
type fieldDemo_Intarray2F struct {
	field.IntStorage[[][]int64]
	config *fielddemoentityConfig
}

// newfieldDemo_Intarray2F creates a new fieldDemo_Intarray2F
func newFieldDemo_Intarray2F(c *fielddemoentityConfig) *fieldDemo_Intarray2F {
	t := &fieldDemo_Intarray2F{}
	t.config = c
	return t
}

// Set sets the value of Intarray2F field
func (t *fieldDemo_Intarray2F) Set(v [][]int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldIntarray2F.Name.String())
	}
}

// Get gets the value of Intarray2F field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_Intarray2F) Get() [][]int64 {
	return *t.IntStorage.Get()
}

// fieldDemo_StringArrayF is StringArrayF field
type fieldDemo_StringArrayF struct {
	field.StringStorage[[]string]
	config *fielddemoentityConfig
}

// newfieldDemo_StringArrayF creates a new fieldDemo_StringArrayF
func newFieldDemo_StringArrayF(c *fielddemoentityConfig) *fieldDemo_StringArrayF {
	t := &fieldDemo_StringArrayF{}
	t.config = c
	return t
}

// Set sets the value of StringArrayF field
func (t *fieldDemo_StringArrayF) Set(v []string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldStringArrayF.Name.String())
	}
}

// Get gets the value of StringArrayF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_StringArrayF) Get() []string {
	return *t.StringStorage.Get()
}

// fieldDemo_BoolArrayF is BoolArrayF field
type fieldDemo_BoolArrayF struct {
	field.BoolStorage[[]bool]
	config *fielddemoentityConfig
}

// newfieldDemo_BoolArrayF creates a new fieldDemo_BoolArrayF
func newFieldDemo_BoolArrayF(c *fielddemoentityConfig) *fieldDemo_BoolArrayF {
	t := &fieldDemo_BoolArrayF{}
	t.config = c
	return t
}

// Set sets the value of BoolArrayF field
func (t *fieldDemo_BoolArrayF) Set(v []bool) {
	t.BoolStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldBoolArrayF.Name.String())
	}
}

// Get gets the value of BoolArrayF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_BoolArrayF) Get() []bool {
	return *t.BoolStorage.Get()
}

// fieldDemo_TimeF is TimeF field
type fieldDemo_TimeF struct {
	field.TimestampStorage[time.Time]
	config *fielddemoentityConfig
}

// newfieldDemo_TimeF creates a new fieldDemo_TimeF
func newFieldDemo_TimeF(c *fielddemoentityConfig) *fieldDemo_TimeF {
	t := &fieldDemo_TimeF{}
	t.config = c
	return t
}

// Set sets the value of TimeF field
func (t *fieldDemo_TimeF) Set(v time.Time) {
	t.TimestampStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldTimeF.Name.String())
	}
}

// Get gets the value of TimeF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_TimeF) Get() time.Time {
	return *t.TimestampStorage.Get()
}

// fieldDemo_TimeArrayF is TimeArrayF field
type fieldDemo_TimeArrayF struct {
	field.TimestampStorage[[]time.Time]
	config *fielddemoentityConfig
}

// newfieldDemo_TimeArrayF creates a new fieldDemo_TimeArrayF
func newFieldDemo_TimeArrayF(c *fielddemoentityConfig) *fieldDemo_TimeArrayF {
	t := &fieldDemo_TimeArrayF{}
	t.config = c
	return t
}

// Set sets the value of TimeArrayF field
func (t *fieldDemo_TimeArrayF) Set(v []time.Time) {
	t.TimestampStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.fielddemoentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldTimeArrayF.Name.String())
	}
}

// Get gets the value of TimeArrayF field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *fieldDemo_TimeArrayF) Get() []time.Time {
	return *t.TimestampStorage.Get()
}
