// Code generated by taurus_go, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/field_demo"
	"time"

	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/field"
)

// fieldDemoInt64F is Int64F field
type fieldDemoInt64F struct {
	field.IntStorage[int64]
	config *fieldDemoEntityConfig
}

// newfieldDemoInt64F creates a new fieldDemoInt64F
func newFieldDemoInt64F(c *fieldDemoEntityConfig) *fieldDemoInt64F {
	t := &fieldDemoInt64F{}
	t.config = c
	return t
}

// Set sets the value of Int64F field
func (t *fieldDemoInt64F) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldInt64F.Name.String())
	}
}

// Get gets the value of Int64F field
func (t *fieldDemoInt64F) Get() *int64 {
	return t.IntStorage.Get()
}

// fieldDemoVarF is VarF field
type fieldDemoVarF struct {
	field.StringStorage[string]
	config *fieldDemoEntityConfig
}

// newfieldDemoVarF creates a new fieldDemoVarF
func newFieldDemoVarF(c *fieldDemoEntityConfig) *fieldDemoVarF {
	t := &fieldDemoVarF{}
	t.config = c
	return t
}

// Set sets the value of VarF field
func (t *fieldDemoVarF) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldVarF.Name.String())
	}
}

// Get gets the value of VarF field
func (t *fieldDemoVarF) Get() *string {
	return t.StringStorage.Get()
}

// fieldDemoBoolF is BoolF field
type fieldDemoBoolF struct {
	field.BoolStorage[bool]
	config *fieldDemoEntityConfig
}

// newfieldDemoBoolF creates a new fieldDemoBoolF
func newFieldDemoBoolF(c *fieldDemoEntityConfig) *fieldDemoBoolF {
	t := &fieldDemoBoolF{}
	t.config = c
	return t
}

// Set sets the value of BoolF field
func (t *fieldDemoBoolF) Set(v bool) {
	t.BoolStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldBoolF.Name.String())
	}
}

// Get gets the value of BoolF field
func (t *fieldDemoBoolF) Get() *bool {
	return t.BoolStorage.Get()
}

// fieldDemoIntArrayF is IntArrayF field
type fieldDemoIntArrayF struct {
	field.IntStorage[[]int64]
	config *fieldDemoEntityConfig
}

// newfieldDemoIntArrayF creates a new fieldDemoIntArrayF
func newFieldDemoIntArrayF(c *fieldDemoEntityConfig) *fieldDemoIntArrayF {
	t := &fieldDemoIntArrayF{}
	t.config = c
	return t
}

// Set sets the value of IntArrayF field
func (t *fieldDemoIntArrayF) Set(v []int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldIntArrayF.Name.String())
	}
}

// Get gets the value of IntArrayF field
func (t *fieldDemoIntArrayF) Get() *[]int64 {
	return t.IntStorage.Get()
}

// fieldDemoIntarray2F is Intarray2F field
type fieldDemoIntarray2F struct {
	field.IntStorage[[][]int64]
	config *fieldDemoEntityConfig
}

// newfieldDemoIntarray2F creates a new fieldDemoIntarray2F
func newFieldDemoIntarray2F(c *fieldDemoEntityConfig) *fieldDemoIntarray2F {
	t := &fieldDemoIntarray2F{}
	t.config = c
	return t
}

// Set sets the value of Intarray2F field
func (t *fieldDemoIntarray2F) Set(v [][]int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldIntarray2F.Name.String())
	}
}

// Get gets the value of Intarray2F field
func (t *fieldDemoIntarray2F) Get() *[][]int64 {
	return t.IntStorage.Get()
}

// fieldDemoBoolArrayF is BoolArrayF field
type fieldDemoBoolArrayF struct {
	field.BoolStorage[[]bool]
	config *fieldDemoEntityConfig
}

// newfieldDemoBoolArrayF creates a new fieldDemoBoolArrayF
func newFieldDemoBoolArrayF(c *fieldDemoEntityConfig) *fieldDemoBoolArrayF {
	t := &fieldDemoBoolArrayF{}
	t.config = c
	return t
}

// Set sets the value of BoolArrayF field
func (t *fieldDemoBoolArrayF) Set(v []bool) {
	t.BoolStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldBoolArrayF.Name.String())
	}
}

// Get gets the value of BoolArrayF field
func (t *fieldDemoBoolArrayF) Get() *[]bool {
	return t.BoolStorage.Get()
}

// fieldDemoTimeF is TimeF field
type fieldDemoTimeF struct {
	field.TimestampStorage[time.Time]
	config *fieldDemoEntityConfig
}

// newfieldDemoTimeF creates a new fieldDemoTimeF
func newFieldDemoTimeF(c *fieldDemoEntityConfig) *fieldDemoTimeF {
	t := &fieldDemoTimeF{}
	t.config = c
	return t
}

// Set sets the value of TimeF field
func (t *fieldDemoTimeF) Set(v time.Time) {
	t.TimestampStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldTimeF.Name.String())
	}
}

// Get gets the value of TimeF field
func (t *fieldDemoTimeF) Get() *time.Time {
	return t.TimestampStorage.Get()
}

// fieldDemoTimeArrayF is TimeArrayF field
type fieldDemoTimeArrayF struct {
	field.TimestampStorage[[]time.Time]
	config *fieldDemoEntityConfig
}

// newfieldDemoTimeArrayF creates a new fieldDemoTimeArrayF
func newFieldDemoTimeArrayF(c *fieldDemoEntityConfig) *fieldDemoTimeArrayF {
	t := &fieldDemoTimeArrayF{}
	t.config = c
	return t
}

// Set sets the value of TimeArrayF field
func (t *fieldDemoTimeArrayF) Set(v []time.Time) {
	t.TimestampStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.fieldDemoEntityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(field_demo.FieldTimeArrayF.Name.String())
	}
}

// Get gets the value of TimeArrayF field
func (t *fieldDemoTimeArrayF) Get() *[]time.Time {
	return t.TimestampStorage.Get()
}
