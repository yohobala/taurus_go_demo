// Code generated by taurus_go, DO NOT EDIT.

package field_demo

import "github.com/yohobala/taurus_go/entity/entitysql"

type OrderOption func(*entitysql.Order)

func ByPrimary(o *entitysql.Order) {
	(&ByInt64F{}).Apply(o)
}

type OrderTerm interface {
	Apply(*entitysql.Order)
}

type ByInt64F struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByInt64F) Apply(o *entitysql.Order) {
	o.SetColumn(FieldInt64F.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByInt64F) Desc() *ByInt64F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByInt64F) Asc() *ByInt64F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByInt64F) NullsFirst() *ByInt64F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByInt64F) NullsLast() *ByInt64F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByVarF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByVarF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldVarF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByVarF) Desc() *ByVarF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByVarF) Asc() *ByVarF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByVarF) NullsFirst() *ByVarF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByVarF) NullsLast() *ByVarF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByBoolF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByBoolF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldBoolF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByBoolF) Desc() *ByBoolF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByBoolF) Asc() *ByBoolF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByBoolF) NullsFirst() *ByBoolF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByBoolF) NullsLast() *ByBoolF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByIntArrayF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByIntArrayF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldIntArrayF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByIntArrayF) Desc() *ByIntArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByIntArrayF) Asc() *ByIntArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByIntArrayF) NullsFirst() *ByIntArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByIntArrayF) NullsLast() *ByIntArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByIntarray2F struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByIntarray2F) Apply(o *entitysql.Order) {
	o.SetColumn(FieldIntarray2F.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByIntarray2F) Desc() *ByIntarray2F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByIntarray2F) Asc() *ByIntarray2F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByIntarray2F) NullsFirst() *ByIntarray2F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByIntarray2F) NullsLast() *ByIntarray2F {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByBoolArrayF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByBoolArrayF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldBoolArrayF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByBoolArrayF) Desc() *ByBoolArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByBoolArrayF) Asc() *ByBoolArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByBoolArrayF) NullsFirst() *ByBoolArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByBoolArrayF) NullsLast() *ByBoolArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByTimeF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByTimeF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldTimeF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByTimeF) Desc() *ByTimeF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByTimeF) Asc() *ByTimeF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByTimeF) NullsFirst() *ByTimeF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByTimeF) NullsLast() *ByTimeF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByTimeArrayF struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByTimeArrayF) Apply(o *entitysql.Order) {
	o.SetColumn(FieldTimeArrayF.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByTimeArrayF) Desc() *ByTimeArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByTimeArrayF) Asc() *ByTimeArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByTimeArrayF) NullsFirst() *ByTimeArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByTimeArrayF) NullsLast() *ByTimeArrayF {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}
