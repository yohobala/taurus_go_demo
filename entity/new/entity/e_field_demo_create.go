// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"context"
	"taurus_go_demo/entity/new/entity/field_demo"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/yohobala/taurus_go/entity/dialect"
	"github.com/yohobala/taurus_go/entity/entitysql"
)

// fieldDemoEntityCreate is the create action for the fieldDemoEntity.
type fieldDemoEntityCreate struct {
	config *internal.Dialect
	es     []*FieldDemoEntity
}

// newFieldDemoEntityCreate creates a new fieldDemoEntityCreate.
func newFieldDemoEntityCreate(c *internal.Dialect, es ...*FieldDemoEntity) *fieldDemoEntityCreate {
	return &fieldDemoEntityCreate{
		config: c,
		es:     es,
	}
}

// create executes the create action.
func (o *fieldDemoEntityCreate) create(ctx context.Context, tx dialect.Tx) error {
	return o.sqlCreate(ctx, tx)
}

// sqlCreate executes the SQL create action.
func (o *fieldDemoEntityCreate) sqlCreate(ctx context.Context, tx dialect.Tx) error {
	var (
		spec, err = o.createSpec()
		res       = o.es
		cursor    = 0
	)
	if err != nil {
		return err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.ScannerField) error {
		e := res[cursor]
		cursor++
		args := e.scan(fields)
		if err := rows.Scan(args...); err != nil {
			return err
		} else {
			res = append(res, e)
			return e.setUnchanged()
		}
	}
	return entitysql.NewCreate(ctx, tx, spec)
}

// createSpec creates the create action spec. It checks for required fields and sets the returning fields.
func (o *fieldDemoEntityCreate) createSpec() (*entitysql.CreateSpec, error) {
	returning := []entitysql.FieldName{}
	entity := field_demo.Entity
	columns := field_demo.Columns
	spec := entitysql.NewCreateSpec(entity, columns)
	spec.Fields = make([][]*entitysql.FieldSpec, 0, len(o.es))
	for _, e := range o.es {
		fields := make([]*entitysql.FieldSpec, 0, len(field_demo.Columns))
		for j := range field_demo.Columns {
			switch field_demo.Columns[j] {
			case field_demo.FieldInt64F.Name:
				v, err := e.Int64F.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldInt64F.Name, e.Int64F); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldInt64F.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.Int64F.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldVarF.Name:
				v, err := e.VarF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldVarF.Name, e.VarF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldVarF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.VarF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldBoolF.Name:
				v, err := e.BoolF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldBoolF.Name, e.BoolF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldBoolF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.BoolF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldIntArrayF.Name:
				v, err := e.IntArrayF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldIntArrayF.Name, e.IntArrayF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldIntArrayF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.IntArrayF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldIntarray2F.Name:
				v, err := e.Intarray2F.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldIntarray2F.Name, e.Intarray2F); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldIntarray2F.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.Intarray2F.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldBoolArrayF.Name:
				v, err := e.BoolArrayF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldBoolArrayF.Name, e.BoolArrayF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldBoolArrayF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.BoolArrayF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldTimeF.Name:
				v, err := e.TimeF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldTimeF.Name, e.TimeF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldTimeF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.TimeF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			case field_demo.FieldTimeArrayF.Name:
				v, err := e.TimeArrayF.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return nil, err
				}
				if err := spec.CheckRequired(o.config.Driver.Dialect(), field_demo.FieldTimeArrayF.Name, e.TimeArrayF); err != nil {
					return nil, err
				}
				fieldSpace := entitysql.NewFieldSpec(field_demo.FieldTimeArrayF.Name)
				fieldSpace.Param = v
				fieldSpace.Format = e.TimeArrayF.SqlFormatParam()
				fields = append(fields, &fieldSpace)
			}
		}
		spec.Fields = append(spec.Fields, fields)
	}
	spec.Returning = returning
	return spec, nil
}
