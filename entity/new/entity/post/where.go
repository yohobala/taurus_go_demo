// Code generated by taurus_go/entity, DO NOT EDIT.

package post

import "github.com/yohobala/taurus_go/entity/entitysql"

type PredID struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredID) EQ(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredID) NEQ(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredID) GT(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GT(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredID) GTE(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredID) LT(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LT(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredID) LTE(id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredID) In(ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		p.In(FieldID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredID) NotIn(ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		p.NotIn(FieldID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredID) Like(id string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.Like(FieldID.Name.String(), p.Builder.FindAs(Entity), id)
	}
}

type PredContent struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredContent) EQ(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredContent) NEQ(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredContent) GT(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GT(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredContent) GTE(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredContent) LT(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LT(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredContent) LTE(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredContent) In(contents ...string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(contents))
		for i := range v {
			v[i] = contents[i]
		}
		p.In(FieldContent.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredContent) NotIn(contents ...string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(contents))
		for i := range v {
			v[i] = contents[i]
		}
		p.NotIn(FieldContent.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredContent) Like(content string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.Like(FieldContent.Name.String(), p.Builder.FindAs(Entity), content)
	}
}

type PredBlogID struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredBlogID) EQ(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredBlogID) NEQ(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredBlogID) GT(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GT(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredBlogID) GTE(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredBlogID) LT(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LT(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredBlogID) LTE(blog_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredBlogID) In(blog_ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(blog_ids))
		for i := range v {
			v[i] = blog_ids[i]
		}
		p.In(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredBlogID) NotIn(blog_ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(blog_ids))
		for i := range v {
			v[i] = blog_ids[i]
		}
		p.NotIn(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredBlogID) Like(blog_id string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.Like(FieldBlogID.Name.String(), p.Builder.FindAs(Entity), blog_id)
	}
}

type PredAuthorID struct {
}

// EQ returns a function that sets the predicate to check if the field is equal to the given value.
// Operator "="
func (f *PredAuthorID) EQ(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.EQ(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// NEQ returns a function that sets the predicate to check if the field is not equal to the given value.
// Operator "<>"
func (f *PredAuthorID) NEQ(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.NEQ(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// GT returns a function that sets the predicate to check if the field is greater than the given value.
// Operator ">"
func (f *PredAuthorID) GT(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GT(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// GTE returns a function that sets the predicate to check if the field is greater than or equal to the given value.
// Operator ">="
func (f *PredAuthorID) GTE(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.GTE(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// LT returns a function that sets the predicate to check if the field is less than the given value.
// Operator "<"
func (f *PredAuthorID) LT(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LT(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// LTE returns a function that sets the predicate to check if the field is less than or equal to the given value.
// Operator "<="
func (f *PredAuthorID) LTE(author_id int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.LTE(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}

// In returns a function that sets the predicate to check if the field is in the given values.
// Operator "IN"
func (f *PredAuthorID) In(author_ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(author_ids))
		for i := range v {
			v[i] = author_ids[i]
		}
		p.In(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// NotIn returns a function that sets the predicate to check if the field is not in the given values.
// Operator "NOT IN"
func (f *PredAuthorID) NotIn(author_ids ...int64) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		v := make([]any, len(author_ids))
		for i := range v {
			v[i] = author_ids[i]
		}
		p.NotIn(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), v...)
	}
}

// Like returns a function that sets the predicate to check if the field is like the given value.
// Operator "LIKE"
func (f *PredAuthorID) Like(author_id string) entitysql.PredicateFunc {
	return func(p *entitysql.Predicate) {
		p.Like(FieldAuthorID.Name.String(), p.Builder.FindAs(Entity), author_id)
	}
}
