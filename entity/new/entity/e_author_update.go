// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"context"
	"taurus_go_demo/entity/new/entity/author"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/dialect"
	"github.com/zodileap/taurus_go/entity/entitysql"
)

// AuthorEntityUpdate is the update action for the AuthorEntity.
type AuthorEntityUpdate struct {
	config     *internal.Dialect
	ctx        *entitysql.QueryContext
	tracker    entity.Tracker
	es         []*AuthorEntity
	predicates [][]entitysql.PredicateFunc
	sets       []map[string]entitysql.CaseSpec
	total      int
	batchIndex []int
}

// newAuthorEntityUpdate creates a new AuthorEntityUpdate.
func newAuthorEntityUpdate(c *internal.Dialect, es ...*AuthorEntity) *AuthorEntityUpdate {
	return &AuthorEntityUpdate{
		config:     c,
		ctx:        &entitysql.QueryContext{},
		es:         es,
		predicates: [][]entitysql.PredicateFunc{},
		batchIndex: []int{0},
	}
}

func (o *AuthorEntityUpdate) update(ctx context.Context, tx dialect.Tx) error {
	return o.sqlUpdate(ctx, tx)
}

func (o *AuthorEntityUpdate) sqlUpdate(ctx context.Context, tx dialect.Tx) error {
	var (
		spec, err = o.updateSpec()
		res       = o.es
		cursor    = 0
	)
	if err != nil {
		return err
	}
	spec.Scan = func(rows dialect.Rows, fields []entitysql.ScannerField) error {
		e := res[cursor]
		cursor++
		args := e.scan(fields)
		if err := rows.Scan(args...); err != nil {
			return err
		} else {
			res = append(res, e)
			return e.setUnchanged()
		}
	}
	return entitysql.NewUpdate(ctx, tx, spec)
}

func (o *AuthorEntityUpdate) updateSpec() (*entitysql.UpdateSpec, error) {
	spec := entitysql.NewUpdateSpec(author.Entity, author.Columns)
	if len(o.predicates) != len(o.sets) {
		return nil, entity.Err_0100030005
	}
	if err := o.setEntity(spec); err != nil {
		return nil, err
	}
	o.mergeArgs(spec)
	return spec, nil
}

// setEntity 用于在updateSpec中设置[]*AuthorEntity的配置，
// 一般来说这个setEntity里的entity都是通过状态追踪，自动添加的。
func (o *AuthorEntityUpdate) setEntity(spec *entitysql.UpdateSpec) error {
	predID := &author.PredID{}
	num := 0
	for i, e := range o.es {
		fields := e.config.Mutation.Fields()
		if len(fields) == 0 {
			return entity.Err_0100030002.Sprintf(e.config.Tag)
		}
		o.predicates = append(o.predicates, []entitysql.PredicateFunc{})
		o.sets = append(o.sets, map[string]entitysql.CaseSpec{})
		// 因为判断过predicates和set长度，所以这里默认等长
		index := len(o.predicates) - 1
		if i > 0 {
			o.predicates[index] = append(o.predicates[index], entitysql.Or, predID.EQ(e.Id.Get()))
		} else {
			o.predicates[index] = append(o.predicates[index], predID.EQ(e.Id.Get()))
		}
		num++
		for _, f := range fields {
			switch f {
			case author.FieldID.Name.String():
				v, err := e.Id.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return err
				}
				fieldSpace := entitysql.NewFieldSpec(author.FieldID.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.Id.SqlFormatParam()
				o.sets[index][author.FieldID.Name.String()] = entitysql.CaseSpec{
					Field: fieldSpace,
					When:  predID.EQ(e.Id.Get()),
				}
				num++
			case author.FieldName.Name.String():
				v, err := e.Name.SqlParam(o.config.Driver.Dialect())
				if err != nil {
					return err
				}
				fieldSpace := entitysql.NewFieldSpec(author.FieldName.Name)
				fieldSpace.Param = v
				fieldSpace.ParamFormat = e.Name.SqlFormatParam()
				o.sets[index][author.FieldName.Name.String()] = entitysql.CaseSpec{
					Field: fieldSpace,
					When:  predID.EQ(e.Id.Get()),
				}
				num++
			}
		}
		batchSize := *(entity.GetConfig().BatchSize)
		if (o.total+num)/batchSize > len(o.batchIndex) {
			o.batchIndex = append(o.batchIndex, len(o.predicates))
		} else {
			o.batchIndex[len(o.batchIndex)-1] = len(o.predicates)
		}
		o.total += num
	}
	return nil
}

func (o *AuthorEntityUpdate) mergeArgs(spec *entitysql.UpdateSpec) {
	for i, end := range o.batchIndex {
		var begin int
		if i == 0 {
			begin = 0
		} else {
			begin = o.batchIndex[i-1]
		}
		pred := []entitysql.PredicateFunc{}
		set := map[string][]entitysql.CaseSpec{}
		for _, ps := range o.predicates[begin:end] {
			pred = append(pred, ps...)
		}
		for _, ss := range o.sets[begin:end] {
			for k, v := range ss {
				set[k] = append(set[k], v)
			}
		}
		spec.Predicate = append(spec.Predicate, func(p *entitysql.Predicate) {
			for _, f := range pred {
				f(p)
			}
		})
		spec.Sets = append(spec.Sets, set)
	}
}
