// Code generated by taurus_go, DO NOT EDIT.

package entity

import (
	"fmt"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/entitysql"

	"taurus_go_demo/entity/new/entity/blog"
)

type BlogEntity struct {
	internal.Entity
	config *BlogEntityConfig

	// ID Blog primary key
	ID *BlogID

	UUID *BlogUUID

	Desc *BlogDesc

	CreatedTime *BlogCreatedTime

	Posts []*PostEntity
}

// BlogEntityConfig holds the configuration for the BlogEntity.
type BlogEntityConfig struct {
	internal.EntityConfig
	*blogMutations
	*entity.Mutation
	*internal.Dialect
	name string
}

func NewBlogConfig(c *internal.Dialect) *BlogEntityConfig {
	return &BlogEntityConfig{
		Dialect:    c,
		blogMutations: newBlogMutations(),
		name: "blog",
	}
}

func (c *BlogEntityConfig) New() internal.Entity {
	b := entity.NewMutation(entity.Detached)
	e := &BlogEntity{
		config: &BlogEntityConfig{
			Mutation:  b,
			Dialect:    c.Dialect,
			blogMutations: c.blogMutations,
		},
	}
	e.setState(entity.Detached)
	e.ID = newBlogID(e.config)
	e.UUID = newBlogUUID(e.config)
	e.Desc = newBlogDesc(e.config)
	e.CreatedTime = newBlogCreatedTime(e.config)
	return e
}

func (c *BlogEntityConfig) Desc() internal.EntityConfigDesc {
	return internal.EntityConfigDesc{
		Name: c.name,
	}
}

// String implements the fmt.Stringer interface.
func (e *BlogEntity) String() string {
	return fmt.Sprintf("{ ID: %v, UUID: %v, Desc: %v, CreatedTime: %v, Posts: %v}",
		e.ID,
		e.UUID,
		e.Desc,
		e.CreatedTime,
		e.Posts,
	)
}

// State returns the state of the BlogEntity.
func (e *BlogEntity) State() entity.EntityState {
	return e.config.State()
}

// remove removes the BlogEntity from the database.
func (e *BlogEntity) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new BlogEntity and adds tracking.
func (e *BlogEntity) create(uuid string, options ...func(*BlogEntity)) (*BlogEntity, error) {
	e.setState(entity.Added)
	e.UUID.Set(uuid)
	for _, option := range options {
		option(e)
	}
	return e, nil
}

// setUnchanged sets the state of the BlogEntity to unchanged.
func (e *BlogEntity) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

// setState sets the state of the BlogEntity.
func (e *BlogEntity) setState(state entity.EntityState) error {
	return e.config.blogMutations.SetEntityState(e, state)
}

// scan scans the database for the BlogEntity.
func (e *BlogEntity) scan( fields []entitysql.ScannerField) []any {
	if len(fields) == 0 {
		args := make([]interface{}, len(blog.Columns))
		for i, c := range blog.Columns {
			switch c.String() {
			case blog.FieldID.Name.String():
				args[i] = e.ID
			case blog.FieldUUID.Name.String():
				args[i] = e.UUID
			case blog.FieldDesc.Name.String():
				args[i] = e.Desc
			case blog.FieldCreatedTime.Name.String():
				args[i] = e.CreatedTime
			}
		}
		return args
	} else {
		args := make([]interface{}, len(fields))
		for i := range fields {
			switch fields[i].String() {
			case blog.FieldID.Name.String():
				args[i] = e.ID
			case blog.FieldUUID.Name.String():
				args[i] = e.UUID
			case blog.FieldDesc.Name.String():
				args[i] = e.Desc
			case blog.FieldCreatedTime.Name.String():
				args[i] = e.CreatedTime
			}
		}
		return args
	}

}

func (e *BlogEntity) createRel(buidler *entitysql.ScannerBuilder, scanner *internal.QueryScanner) {
	switch scanner.Config.Desc().Name {
	case "post":
		post := scanner.Config.New().(*PostEntity)
		buidler.Append(scanner.TableNum - 1, post.scan([]entitysql.ScannerField{})...)
		e.Posts = append(e.Posts, post)
		for _,c := range scanner.Children {
			post.createRel(buidler, c)
		}
	}
}

func mergeBlogEntity(es []*BlogEntity, e *BlogEntity) []*BlogEntity {
	if e == nil{
		return es
	}
	if len(es) == 0 {
		es = append(es, e)
	}else{
		v := es[len(es) - 1]
		if e.ID.Get() != nil {
			if v.ID.Get() != nil && *v.ID.Get() == *e.ID.Get() {
			for _, post := range e.Posts{
				posts := mergePostEntity(v.Posts, post)
				if len(posts) > 0 {
					v.Posts = posts
				}
			}
		}else{
			es = append(es, e)
		}
	}
	}
	return es
}