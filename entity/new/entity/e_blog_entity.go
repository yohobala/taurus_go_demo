// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"fmt"
	"taurus_go_demo/entity/new/entity/blog"
	"taurus_go_demo/entity/new/entity/internal"
	"time"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/entitysql"
)

type BlogEntity struct {
	internal.Entity `json:"-"`
	config          *blogentityConfig
	Id              *blog_ID `json:"id"` // Id Blog primary key
	Uuid            *blog_UUID
	Description     *blog_Description
	CreatedTime     *blog_CreatedTime

	Posts []*PostEntity `json:"posts,omitempty"`
}

// blogentityConfig holds the configuration for the BlogEntity.
type blogentityConfig struct {
	internal.EntityConfig
	*internal.Dialect
	*entity.Mutation
	*blogentityMutations
	name string
}

func newBlogEntityConfig(c *internal.Dialect) *blogentityConfig {
	return &blogentityConfig{
		Dialect:             c,
		blogentityMutations: newBlogEntityMutations(),
		name:                "blog",
	}
}

// New creates a new BlogEntity, but does not add tracking.
func (c *blogentityConfig) New() internal.Entity {
	b := entity.NewMutation(entity.Detached)
	e := &BlogEntity{
		config: &blogentityConfig{
			Mutation:            b,
			Dialect:             c.Dialect,
			blogentityMutations: c.blogentityMutations,
		},
	}
	e.setState(entity.Detached)
	e.Id = newBlog_ID(e.config)
	e.Uuid = newBlog_UUID(e.config)
	e.Description = newBlog_Description(e.config)
	e.CreatedTime = newBlog_CreatedTime(e.config)
	return e
}

func (c *blogentityConfig) Desc() internal.EntityConfigDesc {
	return internal.EntityConfigDesc{
		Name: c.name,
	}
}

// String implements the fmt.Stringer interface.
func (e *BlogEntity) String() string {
	return fmt.Sprintf("{ Id: %v, Uuid: %v, Description: %v, CreatedTime: %v, Posts: %v}",
		e.Id,
		e.Uuid,
		e.Description,
		e.CreatedTime,
		e.Posts,
	)
}

// State returns the state of the BlogEntity.
func (e *BlogEntity) State() entity.EntityState {
	return e.config.State()
}

// remove removes the BlogEntity from the database.
func (e *BlogEntity) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new BlogEntity and adds tracking.
func (e *BlogEntity) create(uuid string, options ...func(*BlogEntity)) (*BlogEntity, error) {
	e.setState(entity.Added)
	e.Uuid.Set(uuid)
	for _, option := range options {
		option(e)
	}
	return e, nil
}

// setUnchanged sets the state of the BlogEntity to unchanged.
func (e *BlogEntity) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

// setState sets the state of the BlogEntity.
func (e *BlogEntity) setState(state entity.EntityState) error {
	return e.config.blogentityMutations.SetEntityState(e, state)
}

// scan scans the database for the BlogEntity.
func (e *BlogEntity) scan(fields []entitysql.ScannerField) []any {
	if len(fields) == 0 {
		args := make([]any, len(blog.Columns))
		for i, c := range blog.Columns {
			switch c.String() {
			case blog.FieldID.Name.String():
				v := e.Id
				v.Set(*new(int64))
				args[i] = v
			case blog.FieldUUID.Name.String():
				v := e.Uuid
				v.Set(*new(string))
				args[i] = v
			case blog.FieldDescription.Name.String():
				v := e.Description
				v.Set(*new(string))
				args[i] = v
			case blog.FieldCreatedTime.Name.String():
				v := e.CreatedTime
				v.Set(*new(time.Time))
				args[i] = v
			}
		}
		return args
	} else {
		args := make([]any, len(fields))
		for i := range fields {
			switch fields[i].String() {
			case blog.FieldID.Name.String():
				v := e.Id
				v.Set(*new(int64))
				args[i] = v
			case blog.FieldUUID.Name.String():
				v := e.Uuid
				v.Set(*new(string))
				args[i] = v
			case blog.FieldDescription.Name.String():
				v := e.Description
				v.Set(*new(string))
				args[i] = v
			case blog.FieldCreatedTime.Name.String():
				v := e.CreatedTime
				v.Set(*new(time.Time))
				args[i] = v
			}
		}
		return args
	}
}

func (e *BlogEntity) createRel(buidler *entitysql.ScannerBuilder, scanner *internal.QueryScanner) {
	switch scanner.Config.Desc().Name {
	case "post":
		postentity := scanner.Config.New().(*PostEntity)
		buidler.Append(scanner.TableNum-1, postentity.scan([]entitysql.ScannerField{})...)
		e.Posts = append(e.Posts, postentity)
		for _, c := range scanner.Children {
			postentity.createRel(buidler, c)
		}
	}
}

func mergeBlogEntity(es []*BlogEntity, e *BlogEntity) []*BlogEntity {
	if e == nil {
		return es
	}
	if len(es) == 0 {
		es = append(es, e)
	} else {
		v := es[len(es)-1]

		if v.Id.Get() == e.Id.Get() {
			for _, post := range e.Posts {
				posts := mergePostEntity(v.Posts, post)
				if len(posts) > 0 {
					v.Posts = posts
				}
			}
		} else {
			es = append(es, e)
		}
	}
	return es
}
