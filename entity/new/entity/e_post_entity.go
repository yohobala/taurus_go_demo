// Code generated by taurus_go, DO NOT EDIT.

package entity

import (
	"fmt"
	"taurus_go_demo/entity/new/entity/internal"

	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/entitysql"

	"taurus_go_demo/entity/new/entity/post"
)

type PostEntity struct {
	internal.Entity
	config *PostEntityConfig

	// ID Post primary key
	ID *PostID

	Content *PostContent

	BlogID *PostBlogID

	AuthorID *PostAuthorID

	Blog   *BlogEntity

	Author *AuthorEntity
}


// PostEntityConfig holds the configuration for the PostEntity.
type PostEntityConfig struct {
	internal.EntityConfig
	*internal.Dialect
	*entity.Mutation
	*postMutations
	name string
}

func NewPostConfig(c *internal.Dialect) *PostEntityConfig {
	return &PostEntityConfig{
		Dialect:    c,
		postMutations: newPostMutations(),
		name: "post",
	}
}



// New creates a new PostEntity, but does not add tracking.
func (c *PostEntityConfig) New () internal.Entity {
	b := entity.NewMutation(entity.Detached)
	e := &PostEntity{
		config: &PostEntityConfig{
			Mutation:  b,
			Dialect:    c.Dialect,
			postMutations: c.postMutations,
		},
	}
	e.setState(entity.Detached)
	e.ID = newPostID(e.config)
	e.Content = newPostContent(e.config)
	e.BlogID = newPostBlogID(e.config)
	e.AuthorID = newPostAuthorID(e.config)
	return e
}


func (c *PostEntityConfig) Desc() internal.EntityConfigDesc {
	return internal.EntityConfigDesc{
		Name: c.name,
	}
}


// String implements the fmt.Stringer interface.
func (e *PostEntity) String() string {
	return fmt.Sprintf("{ ID: %v, Content: %v, BlogID: %v, AuthorID: %v, Blogs: %v, Authors: %v}",
		e.ID,
		e.Content,
		e.BlogID,
		e.AuthorID,
		e.Blog,
		e.Author,
	)
}

// State returns the state of the PostEntity.
func (e *PostEntity) State() entity.EntityState {
	return e.config.State()
}

// remove removes the PostEntity from the database.
func (e *PostEntity) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new PostEntity and adds tracking.
func (e *PostEntity) create(content string, blog_id int64, author_id int64, options ...func(*PostEntity)) (*PostEntity, error) {
	e.setState(entity.Added)
	e.Content.Set(content)
	e.BlogID.Set(blog_id)
	e.AuthorID.Set(author_id)
	for _, option := range options {
		option(e)
	}
	return e, nil
}

// setUnchanged sets the state of the PostEntity to unchanged.
func (e *PostEntity) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

// setState sets the state of the PostEntity.
func (e *PostEntity) setState(state entity.EntityState) error {
	return e.config.postMutations.SetEntityState(e, state)
}

// scan scans the database for the PostEntity.
func (e *PostEntity)scan( fields []entitysql.ScannerField) []any {
	if len(fields) == 0 {
		args := make([]any, len(post.Columns))
		for i, c := range post.Columns {
			switch c.String() {
			case post.FieldID.Name.String():
				args[i] = e.ID
			case post.FieldContent.Name.String():
				args[i] = e.Content
			case post.FieldBlogID.Name.String():
				args[i] = e.BlogID
			case post.FieldAuthorID.Name.String():
				args[i] = e.AuthorID
			}
		}
		return args
	} else{
		args := make([]any, len(fields))
		for i := range fields {
			switch fields[i].String() {
			case post.FieldID.Name.String():
				args[i] = e.ID
			case post.FieldContent.Name.String():
				args[i] = e.Content
			case post.FieldBlogID.Name.String():
				args[i] = e.BlogID
			case post.FieldAuthorID.Name.String():
				args[i] = e.AuthorID
			}
		}
		return args
	}
}


func (e *PostEntity) createRel(buidler *entitysql.ScannerBuilder, scanner *internal.QueryScanner) {
	switch scanner.Config.Desc().Name {
	case "author":
		author := scanner.Config.New().(*AuthorEntity)
		buidler.Append(scanner.TableNum - 1 , author.scan([]entitysql.ScannerField{})...)
		e.Author = author
		for _, c := range scanner.Children {
			author.createRel(buidler, c)
		}
	case "blog":
		blog := scanner.Config.New().(*BlogEntity)
		buidler.Append(scanner.TableNum - 1, blog.scan([]entitysql.ScannerField{})...)
		e.Blog = blog
		for _, c := range scanner.Children {
			blog.createRel(buidler, c)
		}
	}
}

func mergePostEntity(es []*PostEntity, e *PostEntity) []*PostEntity {
	if e == nil{
		return es
	}
	if len(es) == 0 {
		es = append(es, e)
	}else{
		v := es[len(es) - 1]
		if e.ID.Get() != nil {
			if v.ID.Get() != nil && *v.ID.Get() == *e.ID.Get() {
				bs := mergeBlogEntity([]*BlogEntity{v.Blog}, e.Blog)
				if len(bs) > 0 {
					v.Blog = bs[0]
				}
				as := mergeAuthorEntity([]*AuthorEntity{v.Author}, e.Author)
				if len(as) > 0 {
					v.Author = as[0]
				}
			}else{
				es = append(es, e)
			}
		}
	}
	return es
}