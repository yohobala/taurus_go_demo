// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"fmt"
	"taurus_go_demo/entity/new/entity/internal"
	"taurus_go_demo/entity/new/entity/post"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/entitysql"
)

type PostEntity struct {
	internal.Entity `json:"-"`
	config          *postentityConfig
	Id              *post_ID // Id Post primary key
	Content         *post_Content
	BlogID          *post_BlogID
	AuthorID        *post_AuthorID

	Blog *BlogEntity `json:"blog,omitempty"`

	Author *AuthorEntity `json:"author,omitempty"`
}

// postentityConfig holds the configuration for the PostEntity.
type postentityConfig struct {
	internal.EntityConfig
	*internal.Dialect
	*entity.Mutation
	*postentityMutations
	name string
}

func newPostEntityConfig(c *internal.Dialect) *postentityConfig {
	return &postentityConfig{
		Dialect:             c,
		postentityMutations: newPostEntityMutations(),
		name:                "post",
	}
}

// New creates a new PostEntity, but does not add tracking.
func (c *postentityConfig) New() internal.Entity {
	b := entity.NewMutation(entity.Detached)
	e := &PostEntity{
		config: &postentityConfig{
			Mutation:            b,
			Dialect:             c.Dialect,
			postentityMutations: c.postentityMutations,
		},
	}
	e.setState(entity.Detached)
	e.Id = newPost_ID(e.config)
	e.Content = newPost_Content(e.config)
	e.BlogID = newPost_BlogID(e.config)
	e.AuthorID = newPost_AuthorID(e.config)
	return e
}

func (c *postentityConfig) Desc() internal.EntityConfigDesc {
	return internal.EntityConfigDesc{
		Name: c.name,
	}
}

// String implements the fmt.Stringer interface.
func (e *PostEntity) String() string {
	return fmt.Sprintf("{ Id: %v, Content: %v, BlogID: %v, AuthorID: %v, Blog: %v, Author: %v}",
		e.Id,
		e.Content,
		e.BlogID,
		e.AuthorID,
		e.Blog,
		e.Author,
	)
}

// State returns the state of the PostEntity.
func (e *PostEntity) State() entity.EntityState {
	return e.config.State()
}

// remove removes the PostEntity from the database.
func (e *PostEntity) remove() error {
	return e.setState(entity.Deleted)
}

// create creates a new PostEntity and adds tracking.
func (e *PostEntity) create(content string, blog_id int64, author_id int64, options ...func(*PostEntity)) (*PostEntity, error) {
	e.setState(entity.Added)
	e.Content.Set(content)
	e.BlogID.Set(blog_id)
	e.AuthorID.Set(author_id)
	for _, option := range options {
		option(e)
	}
	return e, nil
}

// setUnchanged sets the state of the PostEntity to unchanged.
func (e *PostEntity) setUnchanged() error {
	return e.setState(entity.Unchanged)
}

// setState sets the state of the PostEntity.
func (e *PostEntity) setState(state entity.EntityState) error {
	return e.config.postentityMutations.SetEntityState(e, state)
}

// scan scans the database for the PostEntity.
func (e *PostEntity) scan(fields []entitysql.ScannerField) []any {
	if len(fields) == 0 {
		args := make([]any, len(post.Columns))
		for i, c := range post.Columns {
			switch c.String() {
			case post.FieldID.Name.String():
				v := e.Id
				v.Set(*new(int64))
				args[i] = v
			case post.FieldContent.Name.String():
				v := e.Content
				v.Set(*new(string))
				args[i] = v
			case post.FieldBlogID.Name.String():
				v := e.BlogID
				v.Set(*new(int64))
				args[i] = v
			case post.FieldAuthorID.Name.String():
				v := e.AuthorID
				v.Set(*new(int64))
				args[i] = v
			}
		}
		return args
	} else {
		args := make([]any, len(fields))
		for i := range fields {
			switch fields[i].String() {
			case post.FieldID.Name.String():
				v := e.Id
				v.Set(*new(int64))
				args[i] = v
			case post.FieldContent.Name.String():
				v := e.Content
				v.Set(*new(string))
				args[i] = v
			case post.FieldBlogID.Name.String():
				v := e.BlogID
				v.Set(*new(int64))
				args[i] = v
			case post.FieldAuthorID.Name.String():
				v := e.AuthorID
				v.Set(*new(int64))
				args[i] = v
			}
		}
		return args
	}
}

func (e *PostEntity) createRel(buidler *entitysql.ScannerBuilder, scanner *internal.QueryScanner) {
	switch scanner.Config.Desc().Name {
	case "blog":
		blogentity := scanner.Config.New().(*BlogEntity)
		buidler.Append(scanner.TableNum-1, blogentity.scan([]entitysql.ScannerField{})...)
		e.Blog = blogentity
		for _, c := range scanner.Children {
			blogentity.createRel(buidler, c)
		}
	case "author":
		authorentity := scanner.Config.New().(*AuthorEntity)
		buidler.Append(scanner.TableNum-1, authorentity.scan([]entitysql.ScannerField{})...)
		e.Author = authorentity
		for _, c := range scanner.Children {
			authorentity.createRel(buidler, c)
		}
	}
}

func mergePostEntity(es []*PostEntity, e *PostEntity) []*PostEntity {
	if e == nil {
		return es
	}
	if len(es) == 0 {
		es = append(es, e)
	} else {
		v := es[len(es)-1]

		if v.Id.Get() == e.Id.Get() {
			blogs := mergeBlogEntity([]*BlogEntity{v.Blog}, e.Blog)
			if len(blogs) > 0 {
				v.Blog = blogs[0]
			}
			authors := mergeAuthorEntity([]*AuthorEntity{v.Author}, e.Author)
			if len(authors) > 0 {
				v.Author = authors[0]
			}
		} else {
			es = append(es, e)
		}
	}
	return es
}
