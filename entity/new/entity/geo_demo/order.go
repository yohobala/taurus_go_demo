// Code generated by taurus_go/entity, DO NOT EDIT.

package geo_demo

import "github.com/yohobala/taurus_go/entity/entitysql"

type OrderOption func(*entitysql.Order)

func ByPrimary(o *entitysql.Order) {
	(&ByID{}).Apply(o)
}

type OrderTerm interface {
	Apply(*entitysql.Order)
}

type ByID struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByID) Apply(o *entitysql.Order) {
	o.SetColumn(FieldID.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByID) Desc() *ByID {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByID) Asc() *ByID {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByID) NullsFirst() *ByID {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByID) NullsLast() *ByID {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByPoint struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByPoint) Apply(o *entitysql.Order) {
	o.SetColumn(FieldPoint.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByPoint) Desc() *ByPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByPoint) Asc() *ByPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByPoint) NullsFirst() *ByPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByPoint) NullsLast() *ByPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByLineString struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByLineString) Apply(o *entitysql.Order) {
	o.SetColumn(FieldLineString.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByLineString) Desc() *ByLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByLineString) Asc() *ByLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByLineString) NullsFirst() *ByLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByLineString) NullsLast() *ByLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByPolygon struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByPolygon) Apply(o *entitysql.Order) {
	o.SetColumn(FieldPolygon.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByPolygon) Desc() *ByPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByPolygon) Asc() *ByPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByPolygon) NullsFirst() *ByPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByPolygon) NullsLast() *ByPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByMultiPoint struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByMultiPoint) Apply(o *entitysql.Order) {
	o.SetColumn(FieldMultiPoint.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByMultiPoint) Desc() *ByMultiPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByMultiPoint) Asc() *ByMultiPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByMultiPoint) NullsFirst() *ByMultiPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByMultiPoint) NullsLast() *ByMultiPoint {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByMultiLineString struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByMultiLineString) Apply(o *entitysql.Order) {
	o.SetColumn(FieldMultiLineString.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByMultiLineString) Desc() *ByMultiLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByMultiLineString) Asc() *ByMultiLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByMultiLineString) NullsFirst() *ByMultiLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByMultiLineString) NullsLast() *ByMultiLineString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByMultiPolygon struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByMultiPolygon) Apply(o *entitysql.Order) {
	o.SetColumn(FieldMultiPolygon.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByMultiPolygon) Desc() *ByMultiPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByMultiPolygon) Asc() *ByMultiPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByMultiPolygon) NullsFirst() *ByMultiPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByMultiPolygon) NullsLast() *ByMultiPolygon {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}

type ByCircularString struct {
	OrderTerm
	Options []OrderOption
	Field   string
}

func (b *ByCircularString) Apply(o *entitysql.Order) {
	o.SetColumn(FieldCircularString.Name.String())
	if len(b.Options) == 0 {
		b.Asc()
	}
	for _, opt := range b.Options {
		opt(o)
	}
}

func (b *ByCircularString) Desc() *ByCircularString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Desc()
	})
	return b
}

func (b *ByCircularString) Asc() *ByCircularString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.Asc()
	})
	return b
}

func (b *ByCircularString) NullsFirst() *ByCircularString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsFirst()
	})
	return b
}

func (b *ByCircularString) NullsLast() *ByCircularString {
	b.Options = append(b.Options, func(o *entitysql.Order) {
		o.NullsLast()
	})
	return b
}
