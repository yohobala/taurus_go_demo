// Code generated by taurus_go, DO NOT EDIT.

package entity

import (
	"github.com/yohobala/taurus_go/entity"
	"github.com/yohobala/taurus_go/entity/field"

	"taurus_go_demo/entity/new/entity/author"
)

// AuthorID is ID field
type AuthorID struct {
	field.IntStorage[int64]
	config *AuthorEntityConfig
}

// newAuthorID creates a new IDType
func newAuthorID(c *AuthorEntityConfig) *AuthorID {
	t := &AuthorID{}
	t.config = c
	return t
}

// Set sets the value of ID field
func (t *AuthorID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.aothorMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(author.FieldID.Name.String())
	}
}

// Get gets the value of ID field
func (t *AuthorID) Get() *int64 {
	return t.IntStorage.Get()
}

// AuthorName is Name field
type AuthorName struct {
	field.StringStorage
	config *AuthorEntityConfig
}

// newAuthorName creates a new NameType
func newAuthorName(c *AuthorEntityConfig) *AuthorName {
	t := &AuthorName{}
	t.config = c
	return t
}

// Set sets the value of Name field
func (t *AuthorName) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged {
		t.config.aothorMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(author.FieldName.Name.String())
	}
}

// Get gets the value of Name field
func (t *AuthorName) Get() *string {
	return t.StringStorage.Get()
}
