// Code generated by taurus_go/entity, DO NOT EDIT.

package entity

import (
	"taurus_go_demo/entity/new/entity/author"

	"github.com/zodileap/taurus_go/entity"
	"github.com/zodileap/taurus_go/entity/field"
)

// author_ID is Id field
type author_ID struct {
	field.IntStorage[int64]
	config *authorentityConfig
}

// newauthor_ID creates a new author_ID
func newAuthor_ID(c *authorentityConfig) *author_ID {
	t := &author_ID{}
	t.config = c
	return t
}

// Set sets the value of Id field
func (t *author_ID) Set(v int64) {
	t.IntStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.authorentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(author.FieldID.Name.String())
	}
}

// Get gets the value of Id field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *author_ID) Get() int64 {
	return *t.IntStorage.Get()
}

// author_Name is Name field
type author_Name struct {
	field.StringStorage[string]
	config *authorentityConfig
}

// newauthor_Name creates a new author_Name
func newAuthor_Name(c *authorentityConfig) *author_Name {
	t := &author_Name{}
	t.config = c
	return t
}

// Set sets the value of Name field
func (t *author_Name) Set(v string) {
	t.StringStorage.Set(v)
	if t.config.State() == entity.Unchanged || t.config.State() == entity.Modified {
		t.config.authorentityMutations.ChangeEntityState(t.config.Mutation, entity.Modified)
		t.config.Mutation.SetFields(author.FieldName.Name.String())
	}
}

// Get gets the value of Name field
//
// If the field is required, it returns the value type; otherwise, it returns a pointer type.
func (t *author_Name) Get() string {
	return *t.StringStorage.Get()
}
